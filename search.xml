<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react封装带有加载失败处理的图片组件</title>
      <link href="/2020/07/13/2020/react%E5%B0%81%E8%A3%85%E5%B8%A6%E6%9C%89%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E7%9A%84%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/07/13/2020/react%E5%B0%81%E8%A3%85%E5%B8%A6%E6%9C%89%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E7%9A%84%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天我们要来说一说一个很常用的东西：一个图片组件，不用写一堆繁琐的 <code>onError</code>，不用把代码搞的到处都是，当图片加载失败时，会用默认图片代替原来的图。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p><code>img</code> 标签有一个 <code>onerror</code> 事件，当图片加载失败时就会执行这个事件，我们只要在这个事件中，替换图片的 <code>src</code> 属性，就可以在加载失败时用默认图替换原有的图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logo.png加载失败时，会显示logoError.png --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span> <span class="attr">onerror</span>=<span class="string">"javascript:this.src='logoError.png';"</span> /&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h1><p>知道了原理就好办了，在react中，要使用 <code>onError</code> 事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">  src: <span class="built_in">string</span> <span class="comment">// img原本的的src</span></span><br><span class="line">  style?: React.CSSProperties</span><br><span class="line">  className: <span class="built_in">string</span></span><br><span class="line">  defaultImg: <span class="built_in">string</span> <span class="comment">// 发生错误时需要使用的图片</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ImgWithDefault: React.FC&lt;Props&gt; = <span class="function">(<span class="params">&#123; src, style = &#123;&#125;, className = '', defaultImg &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> Img = React.createRef&lt;HTMLImageElement&gt;()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;img</span><br><span class="line">      ref=&#123;Img&#125;</span><br><span class="line">      style=&#123;style&#125;</span><br><span class="line">      className=&#123;className&#125;</span><br><span class="line">      src=&#123;src&#125;</span><br><span class="line">      onError=&#123;<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Img.current) &#123;</span><br><span class="line">          Img.current.src = defaultImg</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      alt=<span class="string">""</span></span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ImgWithDefault</span><br></pre></td></tr></table></figure><p>当网络状况很差时，<code>defaultImg</code>也可能加载失败，这样<code>onError</code>就会陷入死循环，因此这里需要做个改造：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">  src: <span class="built_in">string</span></span><br><span class="line">  style?: React.CSSProperties</span><br><span class="line">  className: <span class="built_in">string</span></span><br><span class="line">  defaultImg: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ImgWithDefault: React.FC&lt;Props&gt; = <span class="function">(<span class="params">&#123; src, style = &#123;&#125;, className = '', defaultImg &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新增一个状态，标记是否发生过错误</span></span><br><span class="line">  <span class="keyword">const</span> [imgError, setImgError] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> Img = React.createRef&lt;HTMLImageElement&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!imgError) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img</span><br><span class="line">        ref=&#123;Img&#125;</span><br><span class="line">        style=&#123;style&#125;</span><br><span class="line">        className=&#123;className&#125;</span><br><span class="line">        src=&#123;src&#125;</span><br><span class="line">        onError=&#123;<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (Img.current) setImgError(<span class="literal">true</span>)</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        alt=<span class="string">""</span></span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 重点在这里，如果发生错误的话，不再带有onerror处理，防止陷入僵局</span></span><br><span class="line">    <span class="keyword">return</span> &lt;img style=&#123;style&#125; className=&#123;className&#125; src=&#123;defaultImg&#125; alt=<span class="string">""</span> /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>使用起来很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DefaultAvatar <span class="keyword">from</span> <span class="string">'@/assets/avatar.png'</span></span><br><span class="line">&lt;ImgWithDefault src=&#123;user.avatar&#125; className=&#123;styles.avatar&#125; defaultImg=&#123;DefaultAvatar&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> typescript </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react+ts踩坑记1：使用LESS写样式，自动生成类型声明</title>
      <link href="/2020/07/05/2020/react+ts%E8%B8%A9%E5%9D%91%E8%AE%B01%EF%BC%9A%E4%BD%BF%E7%94%A8LESS%E5%86%99%E6%A0%B7%E5%BC%8F/"/>
      <url>/2020/07/05/2020/react+ts%E8%B8%A9%E5%9D%91%E8%AE%B01%EF%BC%9A%E4%BD%BF%E7%94%A8LESS%E5%86%99%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇文章主要介绍如何在react+ts项目中使用<code>less</code>，<code>less-module</code>是如何自动为样式生成对应的<code>d.ts</code>文件，以方便使用ts开发。</p><a id="more"></a><h1 id="增加less支持"><a href="#增加less支持" class="headerlink" title="增加less支持"></a>增加less支持</h1><p>关于如何在react项目中使用less，网上有很多相关文章，我也写过相关的介绍，这个系列文章主要提供问题解决思路和方案，因此不再赘述。</p><h1 id="样式的写法"><a href="#样式的写法" class="headerlink" title="样式的写法"></a>样式的写法</h1><p>配置好 <code>less</code> 和 <code>less-module</code> 后，样式的写法会有略微改变，就像这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.module.less'</span></span><br><span class="line"><span class="keyword">const</span> Component: React.FC&lt;Props&gt; = <span class="function">(<span class="params">&#123;...props&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.main&#125;&gt;</span><br><span class="line">      &lt;div className=&#123;styles.box&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="样式生成类型声明"><a href="#样式生成类型声明" class="headerlink" title="样式生成类型声明"></a>样式生成类型声明</h1><p>如果只是按照上面的方法写，ts会报错，说找不到导入的模块，而且styles没有main和box属性，解决这个问题的方案非常简单，自己声明一个类型即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是cra生成的项目，则在react-app-env.d.ts中添加</span></span><br><span class="line"><span class="comment">// 为模块声明类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.<span class="keyword">module</span>.less' &#123;</span><br><span class="line">  <span class="keyword">const</span> classes: &#123; readonly [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> classes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然用了typescript，就要充分利用类型检查，如果在输入className的时候能够自动提示styles的属性就好了。我们可以使用 <code>@teamsupercell/typings-for-css-modules-loader</code> 来自动生成样式文件对应的 <code>d.ts</code> 文件：</p><p>首先安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @teamsupercell/typings-for-css-modules-loader</span></span><br></pre></td></tr></table></figure><p>增加webpack loader：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个loader需要加在css-loader之前，</span></span><br><span class="line">&#123;</span><br><span class="line">  loader: <span class="built_in">require</span>.resolve(<span class="string">'@teamsupercell/typings-for-css-modules-loader'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    banner: <span class="string">"// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果webpack打包特别慢，可以增加这个配置</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.WatchIgnorePlugin([</span><br><span class="line">    /css\.d\.ts$/,</span><br><span class="line">    /less\.d\.ts$/,</span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置好后，如果书写一段这样的样式：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.module.less</span></span><br><span class="line"><span class="selector-class">.some-class</span> &#123;</span><br><span class="line">  <span class="comment">// some styles</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.someOtherClass</span> &#123;</span><br><span class="line">    <span class="comment">// some other styles </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-sayWhat</span> &#123;</span><br><span class="line">    <span class="comment">// 这里不写任何样式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中导入并使用这个样式，就会自动生成文件，在tsx中书写样式时，就会有代码提示了，我们还可以发现，插件并没有为<code>&amp;-sayWhat</code>生成类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.module.less.d.ts</span></span><br><span class="line"><span class="comment">// autogenerated by typings-for-css-modules-loader.</span></span><br><span class="line"><span class="comment">// Please do not change this file!</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> IndexModuleLessNamespace &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> IIndexModuleLess &#123;</span><br><span class="line">    someClass: <span class="built_in">string</span>;</span><br><span class="line">    <span class="string">'some-class'</span>: <span class="built_in">string</span>;</span><br><span class="line">    someOtherClass: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> IndexModuleLessModule: IndexModuleLessNamespace.IIndexModuleLess &amp; &#123;</span><br><span class="line">  <span class="comment">/** WARNING: Only available when `css-loader` is used without `style-loader` or `mini-css-extract-plugin` */</span></span><br><span class="line">  locals: IndexModuleLessNamespace.IIndexModuleLess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = IndexModuleLessModule</span><br></pre></td></tr></table></figure><blockquote><p>Tips:</p><p>要先写好less，在组件中导入less并应用一次样式，保存后才会生成 d.ts 文件，因为webpack不会处理没有使用的文件</p><p>如果less中只写了类名而没有写具体的样式，d.ts文件不会生成对应的属性，因为空的样式类名在css压缩时被移除了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> react+ts踩坑记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> typescript </tag>
            
            <tag> less </tag>
            
            <tag> css-module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react+ts踩坑记0：前言</title>
      <link href="/2020/07/05/2020/react+ts%E8%B8%A9%E5%9D%91%E8%AE%B00%EF%BC%9A%E5%89%8D%E8%A8%80/"/>
      <url>/2020/07/05/2020/react+ts%E8%B8%A9%E5%9D%91%E8%AE%B00%EF%BC%9A%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>已经研究了一年左右react，目前时机成熟，知识储备足够，我们决定正式在生产环境使用react+ts，期间遇到了一些只在生产环境需要考虑的问题，也踩了许多坑，这个系列会持续更新，记录react在针对生产环境开发和部署时遇到的实际问题、分析过程和解决方案。</p><p><strong>本系列文章适合有webpack基础、对前端架构设计有一定了解、写过react+ts代码的前端工程师阅读，不适合萌新和不熟悉ts的同学。</strong></p><p>写这个系列的主要目的是分享解决问题的思路和方案，而不是教程，要读懂这些文章，你必须：</p><ul><li>了解webpack配置和前端工程化</li><li>理解为什么要使用文中所提到的技术和工具</li><li>写过生产环境中的代码</li><li>理解typescript</li></ul><a id="more"></a><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>我们在生产环境运行的项目主要涉及以下技术：</p><ul><li>react 16.8+ 支持hooks即可</li><li>typescript 3.8+ 高高益善</li><li>react-router-dom 5.0+ 新版更优雅</li><li>redux 4+, react-redux 状态管理</li><li>rxjs 6+, redux-observable 适合我们的异步中间件</li><li>react-transition-group 满足简单的动画需求</li><li>@loadable/component 按需加载组件</li><li>axios 考虑到团队，虽然已经有了rxjs，依然保留axios</li><li>eslint, prettier, husky 开发规范</li><li>less, postcss 处理样式</li><li>jest 测试框架</li></ul><p>还有一些辅助工具：</p><ul><li>js-cookie cookie处理都靠它</li><li>lodash-es 老牌工具库</li><li>qs 虽然node内置的querystring模块也能用，但qs显然更好用</li><li>moment 时间处理</li><li>classnames 方便地处理classname</li><li>typesafe-actions 优雅地构造状态管理的action</li><li>utility-types 好用的ts类型扩展工具</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>react本身并不难，但是配合typescript使用后，会遇到一些奇怪的问题，这里有一些参考资料，能给react+ts提供思路：</p><ul><li><a href="https://github.com/typescript-cheatsheets/react-typescript-cheatsheet" target="_blank" rel="noopener">react-typescript-cheatsheet</a>，提供许多demo代码</li><li><a href="https://github.com/piotrwitek/react-redux-typescript-guide" target="_blank" rel="noopener">react-redux-typescript-guide</a>，解决90%的react相关的类型困惑</li></ul><h1 id="项目的结构和选型"><a href="#项目的结构和选型" class="headerlink" title="项目的结构和选型"></a>项目的结构和选型</h1><h2 id="初始脚手架"><a href="#初始脚手架" class="headerlink" title="初始脚手架"></a>初始脚手架</h2><p>项目基于 <code>create-react-app</code> 生成，我们有维护webpack配置的能力，并且希望最大限度地自定义打包过程，因此用 <code>eject</code> 弹出全部配置，目录结构基本维持原状。</p><h2 id="路由与鉴权"><a href="#路由与鉴权" class="headerlink" title="路由与鉴权"></a>路由与鉴权</h2><p>我们基于 <code>react-router-dom</code> 进行了大刀阔斧的改造，这里不提供细节和实现方法。由于团队之前一直使用vue，更习惯于vue的路由配置，改造后的路由写法与vue基本相同，类似这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: RouteInterface[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/index/index'</span>)),</span><br><span class="line">    name: <span class="string">'Index'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'首页'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Login/index'</span>)),</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/a'</span>,</span><br><span class="line">    component: RouteDemoA,</span><br><span class="line">    name: <span class="string">'demoA'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'DemoA'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/a/b'</span>,</span><br><span class="line">        component: RouteDemoB,</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        name: <span class="string">'demoB'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">'DemoB'</span>,</span><br><span class="line">          auth: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// module routes</span></span><br><span class="line">  ...moduleRoute,</span><br><span class="line">  <span class="comment">// 404 Not Found</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/status/404'</span>)),</span><br><span class="line">    name: <span class="string">'404'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'404'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>我们的应用重状态管理，hooks不能完全满足需求，在不使用装饰器的情况下，<code>redux</code> 是最适合我们的选择。redux的目录结构采用 <code>ducks</code> 方案，比较贴近我们之前在vuex中的设计，类似这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="keyword">import</span> &#123; USER_AVATAR_DEFAULT &#125; <span class="keyword">from</span> <span class="string">'@/config'</span></span><br><span class="line"><span class="keyword">import</span> UserService <span class="keyword">from</span> <span class="string">'@/services/user.service'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleName = <span class="string">'USER'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> types = &#123;</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_USER_INFO: <span class="string">`<span class="subst">$&#123;moduleName&#125;</span>/SET_USER_INFO`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    GET_USER_INFO: <span class="string">`<span class="subst">$&#123;moduleName&#125;</span>/GET_USER_INFO`</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">  userInfo: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [types.mutations.SET_USER_INFO] (state, userInfo) &#123;</span><br><span class="line">    state.userInfo = userInfo</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> [types.actions.GET_USER_INFO] (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> UserService.getUserInfo()</span><br><span class="line">    <span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">      userId: data.member_id,</span><br><span class="line">      nickname: data.nickname,</span><br><span class="line">      avatar: data.avatar || USER_AVATAR_DEFAULT,</span><br><span class="line">    &#125;</span><br><span class="line">    commit(types.mutations.SET_USER_INFO, userInfo)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state: initState,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在react中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DeepReadonly &#125; <span class="keyword">from</span> <span class="string">'utility-types'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ActionType, createAction &#125; <span class="keyword">from</span> <span class="string">'typesafe-actions'</span></span><br><span class="line"><span class="comment">// types</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_USER = <span class="string">'user/SET_USER'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER_REQUEST = <span class="string">'user/FETCH_USER_REQUEST'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER_FAILURE = <span class="string">'user/FETCH_USER_FAILURE'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SET_USER = <span class="keyword">typeof</span> SET_USER</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> FETCH_USER_REQUEST = <span class="keyword">typeof</span> FETCH_USER_REQUEST</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> FETCH_USER_FAILURE = <span class="keyword">typeof</span> FETCH_USER_FAILURE</span><br><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> UserState = DeepReadonly&lt;&#123;</span><br><span class="line">  userId: <span class="built_in">string</span></span><br><span class="line">  nickname: <span class="built_in">string</span></span><br><span class="line">  avatar: <span class="built_in">string</span></span><br><span class="line">&#125;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> User &#123;</span><br><span class="line">  userId: <span class="built_in">string</span></span><br><span class="line">  nickname: <span class="built_in">string</span></span><br><span class="line">  avatar: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState: UserState = &#123;</span><br><span class="line">  userId: <span class="string">''</span>,</span><br><span class="line">  nickname: <span class="string">''</span>,</span><br><span class="line">  avatar: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  [FETCH_USER_REQUEST]: createAction(FETCH_USER_REQUEST)(),</span><br><span class="line">  [FETCH_USER_FAILURE]: createAction(FETCH_USER_FAILURE)(),</span><br><span class="line">  [SET_USER]: createAction(SET_USER, <span class="function">(<span class="params">user: User</span>) =&gt;</span> (&#123; user &#125;))(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SetUser = ActionType&lt;<span class="keyword">typeof</span> actions[SET_USER]&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> FetchUserRequest = ActionType&lt;<span class="keyword">typeof</span> actions[FETCH_USER_REQUEST]&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> FetchUserFailure = ActionType&lt;<span class="keyword">typeof</span> actions[FETCH_USER_FAILURE]&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> UserAction = ActionType&lt;<span class="keyword">typeof</span> actions&gt;</span><br><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">state = initialState, action: UserAction</span>): <span class="title">UserState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_USER:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        ...action.payload.user,</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于异步方案的选型，我们的业务涉及非常复杂的数据流程，<code>redux-saga</code>的写法怪异，因此我们选择 <code>rxjs</code> 作为异步方案，<code>redux-observable</code> 是个现成的可使用redux异步中间件。</p>]]></content>
      
      
      <categories>
          
          <category> react+ts踩坑记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目打包优化指南</title>
      <link href="/2020/06/22/2020/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
      <url>/2020/06/22/2020/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>vue-cli是一个非常好用的vue项目脚手架生成工具，当一个项目从开发环境上线到生产环境时，往往会遇到一些问题：为什么打包出来的文件有2Mb大？为什么页面上的资源加载非常缓慢？为什么有毫不相关的代码被打包到了同一个文件？本文主要针对vue-cli生成的项目，在打包过程中做一些优化。</p><a id="more"></a><p>本文发布时vue-cli的版本为v4。</p><h1 id="按需加载路由"><a href="#按需加载路由" class="headerlink" title="按需加载路由"></a>按需加载路由</h1><p>如果不做额外的配置，当打开项目的首页时，项目就会同时加载许多与当前页面无关的代码，这影响了我们的首页加载速度，按需加载的路由（懒加载）可以解决这个问题。我们让webpack自动识别，把不同的路由组件打包成分开的文件。</p><p>得益于vue-cli的封装，我们只需要这样写路由就可以实现按需加载的路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirect: <span class="string">'/home'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/about'</span>),</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'关于'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p>异步组件的原理跟按需加载路由类似，我们同样只需要以特定的方式书写代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'MyPage'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./test'</span>) <span class="comment">// 异步引入组件，让webpack将代码分割打包</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><p>要解决打包文件过大的问题，先要分析出到底是什么原因导致了文件大，哪些地方可以减小打包大小。</p><p>vue-cli中内置了 <code>webpack-bundle-analyzer</code> 插件，默认情况下，我们修改 <code>package.json</code> 中的打包命令为 <code>npm run build --report</code> 即可查看可视化打包分析：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vue-cli-service build --report"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>执行命令后将会在 <code>dist</code> 目录中多生成一个 <code>report.html</code> 文件，把它在浏览器中打开，即可看到分析：</p><img src="/2020/06/22/2020/vue项目打包优化指南/an.png" title="pic"><p>从图中可以看出，moment这个库占据了大量无用的空间。借助这个工具，我们可以分析是哪些文件占用了空间。</p><h1 id="按需打包Moment-js"><a href="#按需打包Moment-js" class="headerlink" title="按需打包Moment.js"></a>按需打包Moment.js</h1><p><code>moment.js</code> 占用空间大的原因在于，moment中包含了大量语言资源文件，我们并不需要这些。</p><p>通过webpack自身的功能即可在打包时丢弃这些无用的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在项目根目录新建 vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> plugins = [</span><br><span class="line">      <span class="comment">// 只保留中文语言资源</span></span><br><span class="line">      <span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[/\\]locale$/</span>, /zh-cn/),</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按需打包lodash"><a href="#按需打包lodash" class="headerlink" title="按需打包lodash"></a>按需打包lodash</h1><p><code>lodash</code> 也是前端常用的一个工具库，有两种方案可以减小它的打包体积。</p><p>首先我们这么写代码，然后选择下面任意一种方法完成优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k</span>: <span class="string">'v'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> b = cloneDeep(a)</span><br></pre></td></tr></table></figure><h2 id="使用lodash-es（推荐）"><a href="#使用lodash-es（推荐）" class="headerlink" title="使用lodash-es（推荐）"></a>使用lodash-es（推荐）</h2><p>如果使用es模块，那么可以直接安装 <code>lodash-es</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i lodash-es</span><br></pre></td></tr></table></figure><h2 id="lodash-webpack-plugin插件"><a href="#lodash-webpack-plugin插件" class="headerlink" title="lodash-webpack-plugin插件"></a>lodash-webpack-plugin插件</h2><p>也可以使用 <code>lodash-webpack-plugin</code> 插件，自动移除没有用到的lodash代码：</p><blockquote><p>注意：这个插件在使用 <code>find</code> 等方法时可能会删除一些必要的依赖，导致程序报错，解决方法是自己补全依赖，或者换用 <code>lodash-es</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> LodashWebpackPlugin = <span class="built_in">require</span>(<span class="string">'lodash-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> plugins = [</span><br><span class="line">      <span class="comment">// 加入这条</span></span><br><span class="line">      <span class="keyword">new</span> LodashWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h1><p>新版本的vue-cli是自动压缩代码的，所以不需要额外的配置。如果使用旧版cli生成项目，可以查询 <a href="https://github.com/terser/terser" target="_blank" rel="noopener">terser</a> 相关的用法。</p><blockquote><p><code>uglifyify.js</code> 已经停止维护了，不要再使用这个库</p></blockquote><h1 id="生成gzip文件"><a href="#生成gzip文件" class="headerlink" title="生成gzip文件"></a>生成gzip文件</h1><p>nginx可以帮助我们将资源自动压缩为gzip文件，如果我们在打包时能够提供一份压缩好的gzip文件的话，传输会更快。</p><p>这里使用 <code>compression-webpack-plugin</code> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D compression-webpack-plugin</span><br></pre></td></tr></table></figure><p>编辑webpack配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> productionGzipExtensions = [<span class="string">'js'</span>, <span class="string">'css'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> plugins = [</span><br><span class="line">      <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">        algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">        test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.('</span> + productionGzipExtensions.join(<span class="string">'|'</span>) + <span class="string">')$'</span>),</span><br><span class="line">        threshold: <span class="number">10240</span>,</span><br><span class="line">        minRatio: <span class="number">0.8</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 仅在生产环境压缩，提高开发时的编译速度</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      config.plugins = [...plugins, ...config.plugins]</span><br><span class="line">      config.optimization = &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">          cacheGroups: &#123;</span><br><span class="line">            <span class="comment">// 提取公共模块</span></span><br><span class="line">            commons: &#123;</span><br><span class="line">              chunks: <span class="string">'all'</span>,</span><br><span class="line">              minChunks: <span class="number">2</span>,</span><br><span class="line">              maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">              minSize: <span class="number">0</span>,</span><br><span class="line">              name: <span class="string">'common'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：gzip还需要服务端支持，一般在nginx上做配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vue </tag>
            
            <tag> 打包 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年的Array能玩什么花样</title>
      <link href="/2020/03/22/2020/2020%E5%B9%B4%E7%9A%84Array%E8%83%BD%E7%8E%A9%E4%BB%80%E4%B9%88%E8%8A%B1%E6%A0%B7/"/>
      <url>/2020/03/22/2020/2020%E5%B9%B4%E7%9A%84Array%E8%83%BD%E7%8E%A9%E4%BB%80%E4%B9%88%E8%8A%B1%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<p>嗨~我的老伙计们！</p><p>让我们来瞧瞧现在能用哪些数组方法了！还有什么能比知道这些用法更令人兴奋的呢？</p><p>这篇文章不是对Array全部用法的总结，只是给大伙瞧瞧比较好用的功能。</p><a id="more"></a><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>我敢打赌，没有人不知道这个用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>) <span class="comment">// 创建长度为10，值均为undefined的数组</span></span><br></pre></td></tr></table></figure><p>根据<a href="https://tc39.es/ecma262/#sec-array-constructor-array" target="_blank" rel="noopener">es标准</a>，Array直接当函数，用法没什么两样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Array</span>(<span class="number">10</span>) <span class="comment">// 直接当函数用也行</span></span><br></pre></td></tr></table></figure><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>当然了，最方便的创建方法就是字面量声明了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [] <span class="comment">// 声明一个长度为0的数组</span></span><br></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p><code>Array.from()</code> 可以从一个类似数组，或者可迭代对象创建一个新的，浅拷贝的数组实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;) <span class="comment">// [undefined x 3]</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>) <span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + <span class="number">1</span>) <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h2><p><code>Array.of()</code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用of创建不容易出错，因为在只有一个参数时结果与多个参数时也是一致的</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 对比</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [undefined x 3]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3><p><code>Array.isArray()</code> 用于确定传递的值是否是一个 <code>Array</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">x</span>: <span class="number">123</span> &#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，如果包含则返回 true，否则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInclude</span>(<span class="params">arr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(val) &lt; <span class="number">0</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">isInclude(arr, <span class="number">2</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="找值找索引"><a href="#找值找索引" class="headerlink" title="找值找索引"></a>找值找索引</h2><p>现在有更好用的方法 <code>find()</code>  和 <code>findIndex()</code> 来找值找索引了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">1</span>) <span class="comment">// 2，只找最近的一个</span></span><br><span class="line">arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="遍历和测试"><a href="#遍历和测试" class="headerlink" title="遍历和测试"></a>遍历和测试</h2><p>有一大堆方法能够遍历数组，map 和 forEach 这类的就不讲了，有些方法还能测试数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">4</span>) <span class="comment">// true，每个元素都满足条件时返回true，空数组始终返回true</span></span><br><span class="line">arr.some(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">2</span>) <span class="comment">// true，只要有一个元素满足条件，就返回true，空数组始终返回false</span></span><br><span class="line">arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">3</span>) <span class="comment">// [1, 2]，过滤满足条件的元素，组成新数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flat()方法深遍历数组，将遍历到的元素组成一个新数组，默认参数为1</span></span><br><span class="line"><span class="keyword">const</span> brr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">brr.flat() <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line">brr.flat(<span class="number">2</span>) <span class="comment">// [1, 2, 3, 4, 5, 6]， 遍历两层</span></span><br><span class="line">brr.flat(<span class="literal">Infinity</span>) <span class="comment">// [1, 2, 3, 4, 5, 6]， 展开全部</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crr = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>]</span><br><span class="line">crr.flat() <span class="comment">// [1, 2] // 空项会被移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap()方法映射每一个元素，然后将结果压缩成一个数组</span></span><br><span class="line"><span class="comment">// 这儿有个拆词的例子</span></span><br><span class="line"><span class="keyword">const</span> drr = [<span class="string">'I love eat'</span>, <span class="string">'cakes'</span>]</span><br><span class="line">drr.flatMap(<span class="function"><span class="params">item</span> =&gt;</span> item.split(<span class="string">' '</span>)) <span class="comment">// ['I', 'love', 'eat', 'cakes']</span></span><br></pre></td></tr></table></figure><h2 id="取迭代器"><a href="#取迭代器" class="headerlink" title="取迭代器"></a>取迭代器</h2><p><code>entries()</code> 和 <code>keys()</code> 方法帮助我们获取数组迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> iterator1 = arr.keys()</span><br><span class="line">iterator1.next().value <span class="comment">// 'a'</span></span><br><span class="line">iterator1.next().value <span class="comment">// 'b'</span></span><br><span class="line">iterator2.next().value <span class="comment">// 'c'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator2 = arr.entries()</span><br><span class="line">iterator2.next().value <span class="comment">// [0, 'a']</span></span><br><span class="line">iterator2.next().value <span class="comment">// [1, 'b']</span></span><br><span class="line">iterator2.next().value <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><h2 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h2><p><code>reduce()</code> 方法对数组中的每个元素执行一个reducer函数（升序执行），将结果汇总为单个返回值，第一个参数是reducer函数，第二个参数是初始值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">sum, currentVal, index, arr</span>) =&gt;</span> sum + currentVal) <span class="comment">// 6，相当于1+2+3</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">sum, currentVal, index, arr</span>) =&gt;</span> sum + currentVal, <span class="number">4</span>) <span class="comment">// 10，相当于1+2+3+4</span></span><br></pre></td></tr></table></figure><hr><p>好了伙计们，为了找到这些小花样我可花了不少时间，你的老板看到你在认真学习会很开心的，说不定会给你加工资呢。看在上帝的份上，支持关注一波吧！</p>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解浏览器缓存</title>
      <link href="/2020/03/09/2020/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2020/03/09/2020/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>发布一个新版本页面后，如果未加干预，用户往往还会看到更新前的样式，这就是浏览器端的缓存在“捣乱”了，本文写于2020年3月，介绍浏览器的缓存机制，还会告诉你如何在需要的时候使用或丢弃缓存。</p><a id="more"></a><h1 id="什么是浏览器缓存"><a href="#什么是浏览器缓存" class="headerlink" title="什么是浏览器缓存"></a>什么是浏览器缓存</h1><p>我们知道，前端代码100%地运行在浏览器端，当用户打开一个页面时，需要下载 html, js, css 和一堆图片，页面在短期内一般不会有改变，通常，浏览器会聪明地记录这些<strong>静态资源</strong>的相关信息，保存在临时目录中的css和图片等等，都不会被删除，这就是缓存的一种。当用户再次访问同样的页面时，浏览器会优先使用缓存，找不到缓存时，才会从互联网重新下载。此时虽然页面的样式已经在服务端更新了，但浏览器认为本地已经有了这份样式，就不会再重新下载新样式，用户看到的就是老版本的页面了。</p><ul><li>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。</li><li>浏览器缓存能够显著加快页面加载速度，节约流量，也能减轻服务端的访问压力。</li></ul><h1 id="缓存的方式"><a href="#缓存的方式" class="headerlink" title="缓存的方式"></a>缓存的方式</h1><p>要想更好地利用缓存，我们需要知道缓存的工作方式。</p><p>缓存是在服务器响应浏览器发出的请求时建立的，每次浏览器发送请求时，都会先尝试寻找缓存，拿到服务器发送的响应后，再根据响应报文中的缓存标识来决定是否要建立缓存。</p><p>浏览器的缓存分为两种：<strong>强缓存</strong>和<strong>协商缓存</strong></p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>强缓存就是指，浏览器不向服务端发送请求，直接从缓存读取信息，这时对应的请求会返回状态码200 。</p><p>强缓存由 <strong>Expires(HTTP/1)</strong> 和 <strong>Cache-Control(HTTP/1.1)</strong> 这两种Header控制。</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>这个字段是一个GMT格式的字符串，比如Mon, Mar 09 2020 23:11:29 GMT，如果发送请求时，时间（本地时间）超过了这个时间，那么缓存就会失效，浏览器会到服务器去获取资源，否则缓存有效，返回状态码304 。</p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>这个字段在HTTP/1.1中生效，这也是浏览器默认的协议版本，它可以在<strong>请求头</strong>或<strong>响应头</strong>中配置。如果 Cache-Control 与 Expires 同时存在，<strong>那么 Cache-Control 的优先级更高，只有 Cache-Control 会生效</strong></p><p>当 <code>Cache-Control: max-age=300</code> 时，也就意味着缓存内容将在300秒后失效。</p><p>Cache-Control经常用到这些值：</p><ul><li><strong>private</strong> 默认值，表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容</li><li><strong>public</strong> 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容（例如，该响应没有max-age指令或Expires消息头）</li><li><strong>no-cache</strong> 资源会被缓存，但所有的请求都要发到服务端，经过服务端验证来决定是否有效（协商缓存）</li><li><strong>no-store</strong> 所有资源都不会被缓存</li><li><strong>max-age=number</strong> 缓存在一定时期内有效，max-age的取值不能超过31536000（一年）</li></ul><p>关于 Cache-Control, 更详细的内容可以看 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">MDN</a></p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>强缓存只依赖本地的信息来判断缓存是否有效，有时我们需要由服务端来决定是否使用缓存，这时候就要用到协商缓存。</p><p>协商缓存主要由 <strong>Last-Modified / If-Modified-Since 和 Etag / If-None-Match</strong> 字段控制。</p><h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a>Last-Modified / If-Modified-Since</h3><p>服务端响应请求的时候，会用 Last-Modified 标记资源最后一次被修改的时间，例如: <code>last-modifiled: Mon, Mar 09 2020 23:11:29 GMT</code>，</p><p>客户端再次发送请求时，会用上一次返回的 Last-Modified 的值作为 If-Modified-Since，服务端接收到请求后，如果发现请求头中含有 If-Modified-Since，则会把这两个值对比，如果服务器上资源的修改时间大于 If-Modified-Since，则返回新的资源，状态码为200，否则返回状态码304，通知客户端使用缓存 。</p><p>如果没有命中缓存，那么响应中的 Last-Modified 会被更新，反之则不更新。</p><h3 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag / If-None-Match"></a>Etag / If-None-Match</h3><p>Etag 表示资源文件的唯一标志，由服务端在响应请求时生成，例如: <code>etag: &quot;6e6-577d9f8d6f980&quot;</code>，</p><p>客户端再次发送请求时，用上次返回的 Etag 作为 If-None-Match 带在请求头中，服务端接收到请求后，如果发现请求头中含有 If-None-Match，则会把 If-None-Match 与资源文件的Etag值做对比，如果相同，则返回304，使用缓存，否则返回新资源，状态码为200 。</p><p>无论是否命中缓存，响应中都会返回 Etag，如果命中了缓存，则返回的 Etag 与上次相同。</p><p><strong>如果请求头中同时含有 If-None-Match 和 If-Modified-Since，则仅有 If-None-Match 生效。</strong></p><p>这张图大致描述了浏览器选择缓存的流程：</p><img src="/2020/03/09/2020/理解浏览器缓存/flow1.jpg" title="pic"><h1 id="如何判断是否使用了缓存"><a href="#如何判断是否使用了缓存" class="headerlink" title="如何判断是否使用了缓存"></a>如何判断是否使用了缓存</h1><p>打开浏览器的开发者工具，可以直观地观察缓存的启用，这里以chrome的dev-tool为例。</p><p>从 status 和 size 可以看出，这些资源命中了缓存，<strong>memory cache</strong>是指缓存保存在内存中，关闭浏览器时缓存就释放掉了，一般脚本，图片是这种方式缓存的，还有一种存储方式是 <strong>disk cache</strong>，说明缓存保存在硬盘中，关闭浏览器后缓存不会释放，一般css会用这种方式缓存：</p><img src="/2020/03/09/2020/理解浏览器缓存/tool1.png" title="pic"><p>vip这个资源状态码为304，由于有 if-modified-since，使用了协商缓存：</p><img src="/2020/03/09/2020/理解浏览器缓存/tool2.png" title="pic"><p>jquery这个资源，状态码为200，由于有 cache-control，使用了强缓存：</p><img src="/2020/03/09/2020/理解浏览器缓存/tool3.png" title="pic"><h1 id="如何合理利用浏览器缓存"><a href="#如何合理利用浏览器缓存" class="headerlink" title="如何合理利用浏览器缓存"></a>如何合理利用浏览器缓存</h1><h2 id="针对频繁变动的资源"><a href="#针对频繁变动的资源" class="headerlink" title="针对频繁变动的资源"></a>针对频繁变动的资源</h2><p>在请求头中带上 <code>Cache-Control: no-cache</code> 来避免频繁变动的资源命中缓存。</p><h2 id="针对几乎不会变的资源"><a href="#针对几乎不会变的资源" class="headerlink" title="针对几乎不会变的资源"></a>针对几乎不会变的资源</h2><p>配置 <code>Cache-Control: max-age=31536000</code> 来强制使用缓存，一般jquery等第三方库引入时，可以用这个方法，如果要更新版本，直接更新url即可，例如 <code>jquery-1.9.0.min.js</code>。</p><h2 id="webpack打包时丢弃旧版本缓存"><a href="#webpack打包时丢弃旧版本缓存" class="headerlink" title="webpack打包时丢弃旧版本缓存"></a>webpack打包时丢弃旧版本缓存</h2><p>发布新版本后，我们系统客户端能及时更新，如果请求的url不同，则不会命中缓存。可以在webpack配置中这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">// 这样配置，webpack会为打包出的文件加上8位hash</span></span><br><span class="line">  filename: <span class="string">'js/[name].[contenthash:8].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx配置干预缓存"><a href="#nginx配置干预缓存" class="headerlink" title="nginx配置干预缓存"></a>nginx配置干预缓存</h2><p>nginx可以用<code>add_header</code>增加响应头来控制缓存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80 default;</span><br><span class="line">  server_name  &#123;&#123;NGINX_SERVER_NAME&#125;&#125;;</span><br><span class="line">  root   /w/;</span><br><span class="line">  index  index.html;</span><br><span class="line">  location @rewrite &#123;</span><br><span class="line">    rewrite ^/app/(.*)$ /$1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /app &#123;</span><br><span class="line">    try_files $uri $uri/ /app/index.html;</span><br><span class="line">    add_header Cache-Control &quot;no-cache, no-store&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制index-html的缓存"><a href="#控制index-html的缓存" class="headerlink" title="控制index.html的缓存"></a>控制index.html的缓存</h2><p>index.html可以配置meta标签来控制缓存：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 关闭index.html的缓存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拼接查询参数丢弃缓存"><a href="#拼接查询参数丢弃缓存" class="headerlink" title="拼接查询参数丢弃缓存"></a>拼接查询参数丢弃缓存</h2><p>script标签中的src，link标签中的href，都可以在路径后面拼上 <code>?xxx</code>，拼接参数不会影响资源访问，但可以起到改变url丢弃缓存的目的。</p><h1 id="用户如何丢弃缓存"><a href="#用户如何丢弃缓存" class="headerlink" title="用户如何丢弃缓存"></a>用户如何丢弃缓存</h1><p>如果你是一个用户，可以用以下任意一种方法来丢弃缓存：</p><ol><li>在chrome中按 <code>ctrl+F5</code> 强制刷新</li><li>打开 dev-tool 工具，鼠标左键长按浏览器的刷新按钮，选择 <code>清空缓存并进行硬刷新</code></li><li>在浏览器设置中清除缓存</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费雪耶茨洗牌算法</title>
      <link href="/2019/11/02/2019/%E8%B4%B9%E9%9B%AA%E8%80%B6%E8%8C%A8%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2019/11/02/2019/%E8%B4%B9%E9%9B%AA%E8%80%B6%E8%8C%A8%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><p>费雪耶茨算法（Fisher-Yates shuffle），用来将一个集合随机排列，常用在扑克洗牌，打乱抽奖奖池等场景中。</p><p>使用 Fisher-Yates 算法打乱顺序，得到的每种排列都是等概率的。Fisher-Yates 算法运行时不占用额外的存储空间，消耗的时间正比于需要打乱的数的数量，改良后的算法时间复杂度仅有O(n)。</p><a id="more"></a><p>以下结合图例来说明算法：</p><p>首先我们创建这样一个集合：</p><p>[1,2,3,4,5,6,7,8]</p><p>从0-7号索引位置中随机选择一个位置，将这个值与最后一个位置的值交换位置，假设选中了2号索引，也就是3这个值，则得到结果：</p><p>[1,2,8,4,5,6,7,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_01.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_02.jpg" title="pic"><p>再从0-6号位置随机选择一个，将它与最后第二个值交换位置，假设选中了5，则得到结果：</p><p>[1,2,8,4,7,6,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_03.jpg" title="pic"><p>再从0-5号位置随机选择一个，将它与最后第三个值交换位置，假设选中了2，则得到结果：</p><p>[1,6,8,4,7,6,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_04.jpg" title="pic"><p>再从0-4号位置随机选择一个，将它与最后第四个值交换位置，假设选中了8，则得到结果：</p><p>[1,6,7,4,8,2,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_05.jpg" title="pic"><p>再从0-3号位置随机选择一个，将它与最后第五个值交换位置，假设选中了1，则得到结果：</p><p>[4,6,7,1,8,2,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_06.jpg" title="pic"><p>再从0-2号位置随机选择一个，将它与最后第六个值交换位置，假设选中了4，则得到结果：</p><p>[7,6,4,1,8,2,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_07.jpg" title="pic"><p>再从0-1号位置随机选择一个，将它与最后第七个值交换位置，假设选中了6，6与最后第七个位置是同一个位置，不需要交换，则得到结果：</p><p>[7,6,4,1,8,2,5,3]</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_08.jpg" title="pic"><p>下图连续展示了变化过程：</p><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_01.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_02.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_03.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_04.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_05.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_06.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_07.jpg" title="pic"><img src="/2019/11/02/2019/费雪耶茨洗牌算法/shuffle_08.jpg" title="pic"><h1 id="算法实现（typescript）"><a href="#算法实现（typescript）" class="headerlink" title="算法实现（typescript）"></a>算法实现（typescript）</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = arr;</span><br><span class="line">  <span class="keyword">let</span> j: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = result.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">    [result[i], result[j]] = [result[j], result[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 洗牌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(六)</title>
      <link href="/2019/10/06/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E5%85%AD)/"/>
      <url>/2019/10/06/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<p>本篇是前文的扩展延伸。</p><h1 id="美化webpack输出信息"><a href="#美化webpack输出信息" class="headerlink" title="美化webpack输出信息"></a>美化webpack输出信息</h1><p>webpack在开发时的输出信息有一大堆，可能会干扰我们查看信息，以下提供一个美化、精简输出信息的建议。</p><p>精简以下开发服务器输出信息，修改<code>webpack.dev.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...webpack configs</span></span><br><span class="line">stats: &#123;</span><br><span class="line">  colors: <span class="literal">true</span>,</span><br><span class="line">  children: <span class="literal">false</span>,</span><br><span class="line">  chunks: <span class="literal">false</span>,</span><br><span class="line">  chunkModules: <span class="literal">false</span>,</span><br><span class="line">  modules: <span class="literal">false</span>,</span><br><span class="line">  builtAt: <span class="literal">false</span>,</span><br><span class="line">  entrypoints: <span class="literal">false</span>,</span><br><span class="line">  assets: <span class="literal">false</span>,</span><br><span class="line">  version: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>美化一下打包输出，安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D ora chalk</span><br></pre></td></tr></table></figure><p>修改<code>config/build.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>); <span class="comment">// 如果要改变输出信息的颜色，使用这个，本例没有用到</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'webpack编译开始...\n'</span>).start();</span><br><span class="line"></span><br><span class="line">webpack(webpackConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    spinner.fail(<span class="string">'编译失败'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  spinner.succeed(<span class="string">'编译结束!\n'</span>);</span><br><span class="line"></span><br><span class="line">  process.stdout.write(stats.toString(&#123;</span><br><span class="line">    colors: <span class="literal">true</span>,</span><br><span class="line">    modules: <span class="literal">false</span>,</span><br><span class="line">    children: <span class="literal">false</span>,</span><br><span class="line">    chunks: <span class="literal">false</span>,</span><br><span class="line">    chunkModules: <span class="literal">false</span></span><br><span class="line">  &#125;) + <span class="string">'\n\n'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>分别运行打包和开发命令，控制台界面是不是清爽多了？</p><h1 id="路由的配置"><a href="#路由的配置" class="headerlink" title="路由的配置"></a>路由的配置</h1><p>本段提供一个<code>react-router</code>的实践。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i react-router-dom react-router-config @types/react-router-dom @types/react-router-config</span><br><span class="line">$ npm i @loadable/component</span><br></pre></td></tr></table></figure><p>新建<code>src/router.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loadable <span class="keyword">from</span> <span class="string">'@loadable/component'</span>; <span class="comment">// 按需加载</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> basename = <span class="string">''</span>; <span class="comment">// 如果访问路径有二级目录，则需要配置这个值，如首页地址为'http://tianzhen.tech/blog/home'，则这里配置为'/blog'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/demo/HelloWorldDemo/HelloWorldDemoPage'</span>)), <span class="comment">// 组件需要你自己准备</span></span><br><span class="line">    name: <span class="string">'home'</span>, <span class="comment">// 自定义属性</span></span><br><span class="line">    title: <span class="string">'react-home'</span> <span class="comment">// 自定义属性</span></span><br><span class="line">    <span class="comment">// 这里可以扩展一些自定义的属性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/demo/HelloWorldDemo/HelloWorldDemoPage'</span>)),</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    title: <span class="string">'HelloWorld'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404 Not Found</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    component: loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/demo/404Page/404Page'</span>)),</span><br><span class="line">    name: <span class="string">'404'</span>,</span><br><span class="line">    title: <span class="string">'404'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>改造<code>index.tsc</code>，启用路由：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderRoutes &#125; <span class="keyword">from</span> <span class="string">'react-router-config'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes, basename &#125; <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/App.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: React.FC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;BrowserRouter basename=&#123;basename&#125;&gt;&#123;renderRoutes(routes)&#125;&lt;<span class="regexp">/BrowserRouter&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>我们还可以利用路由为每个页面设置标题。</p><p>先写一个hook：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDocTitle</span>(<span class="params">title: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> originalTitle = <span class="built_in">document</span>.title;</span><br><span class="line">    <span class="built_in">document</span>.title = title;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.title = originalTitle;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把hook应用在需要修改标题的组件中即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDocTitle &#125; <span class="keyword">from</span> <span class="string">'@/utils/hooks/useDocTitle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">'./react-logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./HelloWorldDemoPage.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HelloWorldDemoPage: React.FC&lt;Routes&gt; = <span class="function">(<span class="params">routes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; route &#125; = routes; <span class="comment">// 获取传入的路由配置</span></span><br><span class="line">  useDocTitle(route.title); <span class="comment">// 修改标题</span></span><br><span class="line">  <span class="keyword">return</span> &lt;div className=<span class="string">"App"</span>&gt;hello, world&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default HelloWorldDemoPage;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(五)</title>
      <link href="/2019/10/05/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%BA%94)/"/>
      <url>/2019/10/05/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<p>这一篇主要介绍代码规范相关的内容。</p><h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><p>我们通常使用lint工具来检查代码不规范的地方，以下是将 eslint、typescript 和 webpack 结合使用的例子。</p><p>首先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D eslint babel-eslint eslint-loader eslint-plugin-jsx-control-statements</span><br><span class="line">$ npm i -D eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后在根目录新建eslint配置文件<code>.eslintrc.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// "jquery": true</span></span><br><span class="line">    <span class="string">"jest"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"jsx-control-statements/jsx-control-statements"</span>: <span class="literal">true</span> <span class="comment">// 能够在jsx中使用if，需要配合另外的babel插件使用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">  <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">'module'</span>,</span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">      <span class="string">"jsx"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"experimentalObjectRestSpread"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="comment">// "wx": "readonly",</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:jsx-control-statements/recommended"</span>, <span class="comment">// 需要另外配合babel插件使用</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: &#123;</span><br><span class="line">      <span class="string">"version"</span>: <span class="string">"detect"</span> <span class="comment">// 自动读取已安装的react版本</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@typescript-eslint"</span>, <span class="string">"react"</span>, <span class="string">"jsx-control-statements"</span>],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-extra-semi"</span>: <span class="number">0</span>, <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">    <span class="string">"quotes"</span>: [<span class="string">'error'</span>, <span class="string">'single'</span>], <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">"no-unused-vars"</span>: <span class="number">0</span> <span class="comment">// 不允许未定义的变量</span></span><br><span class="line">    <span class="comment">// ...你自己的配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可能希望检查或不检查某些特定的文件，可以在根目录新建<code>.eslintignore</code>，以下配置不检查src目录以外的js文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**/*.js</span><br><span class="line">!src/**/*.js</span><br></pre></td></tr></table></figure><p>还需要配置webpack，才能在开发时启用eslint：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    <span class="comment">// 把这个配置放在所有loader之前</span></span><br><span class="line">    &#123;</span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      include: [APP_PATH],</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        emitWarning: <span class="literal">true</span>, <span class="comment">// 这个配置需要打开，才能在控制台输出warning信息</span></span><br><span class="line">        emitError: <span class="literal">true</span>, <span class="comment">// 这个配置需要打开，才能在控制台输出error信息</span></span><br><span class="line">        fix: <span class="literal">true</span> <span class="comment">// 是否自动修复，如果是，每次保存时会自动修复可以修复的部分</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h1><p>除了约束开发时的编码规范外，我们一般还希望在提交代码时自动格式化代码，但我们只希望处理当前提交的代码，而不是整个代码库，否则会把提交记录搞得乱七八糟，<a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier</a>和<a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a>可以完成这项任务。</p><p>先安装工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D prettier eslint-plugin-prettier eslint-config-prettier</span><br><span class="line">$ npm i -D lint-staged</span><br></pre></td></tr></table></figure><p>在根目录增加prettier配置<code>.prettierrc.js</code>，同样的也可以增加忽略配置<code>.prettierignore</code>（建议配置为与lint忽略规则一致）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个配置需要与eslint一致，否则在启用 eslint auto fix 的情况下会造成冲突</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"printWidth"</span>: <span class="number">120</span>, <span class="comment">//一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"useTabs"</span>: <span class="literal">false</span>, <span class="comment">// 注意：makefile文件必须使用tab，视具体情况忽略</span></span><br><span class="line">  <span class="string">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"trailingComma"</span>: <span class="string">"none"</span>, <span class="comment">//是否使用尾逗号，有三个可选值"&lt;none|es5|all&gt;"</span></span><br><span class="line">  <span class="string">"bracketSpacing"</span>: <span class="literal">true</span>, <span class="comment">//对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改eslint配置<code>.eslintrc.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:jsx-control-statements/recommended"</span>, <span class="comment">// 需要另外配合babel插件使用</span></span><br><span class="line">    <span class="string">"prettier"</span> <span class="comment">// 注意顺序</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@typescript-eslint"</span>, <span class="string">"react"</span>, <span class="string">"jsx-control-statements"</span>, <span class="string">"prettier"</span>], <span class="comment">// 注意顺序</span></span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"prettier/prettier"</span>: <span class="number">2</span>, <span class="comment">// 这样prettier的提示能够以错误的形式在控制台输出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们要配置<code>lint-staged</code>，在提交代码时自动格式化代码。</p><p>修改<code>package.json</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "pre-commit": "lint-staged"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">"lint-staged": &#123;</span><br><span class="line">  "src/**/*.&#123;jsx,js,tsx,ts&#125;": [</span><br><span class="line">    "prettier --write",</span><br><span class="line">    "eslint --fix",</span><br><span class="line">    <span class="string">"git add"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用editorconfig统一编辑器规范"><a href="#用editorconfig统一编辑器规范" class="headerlink" title="用editorconfig统一编辑器规范"></a>用editorconfig统一编辑器规范</h1><p>有些编辑器能够根据配置提示会自动格式化代码，我们可以为各种编辑器提供一个统一的配置。</p><p>在根目录新建<code>.editorconfig</code>即可，注意不要与已有的lint规则冲突：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure><h1 id="使用jest"><a href="#使用jest" class="headerlink" title="使用jest"></a>使用jest</h1><p>使用jest可以帮助我们测试代码，在项目中使用jest的实现方式有很多种，文本不具体展开讨论，只提供一些必备的工具和配置。</p><p>必备工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D jest babel-jest ts-jest @types/jest</span><br></pre></td></tr></table></figure><p>参考配置<code>jest.config.js</code>，测试文件均放在<code>__test__</code>目录中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  transform: &#123;</span><br><span class="line">    <span class="string">'^.+\\.tsx?$'</span>: <span class="string">'ts-jest'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  testRegex: <span class="string">'(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$'</span>,</span><br><span class="line">  moduleFileExtensions: [<span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'js'</span>, <span class="string">'jsx'</span>, <span class="string">'json'</span>, <span class="string">'node'</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(四)</title>
      <link href="/2019/10/04/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E5%9B%9B)/"/>
      <url>/2019/10/04/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="配置webpack开发服务器"><a href="#配置webpack开发服务器" class="headerlink" title="配置webpack开发服务器"></a>配置webpack开发服务器</h1><p>打包用的配置基本完成了，现在我们来配置一下开发环境。</p><p>首先处理通用配置<code>config.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...configs</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'../public'</span>),</span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    clientLogLevel: <span class="string">'error'</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    quiet: <span class="literal">false</span>,</span><br><span class="line">    noInfo: <span class="literal">false</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后增加开发配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge.smart(baseWebpackConfig, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[hash:8].js'</span>,</span><br><span class="line">    publicPath: config.publicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: config.indexPath,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        html5: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      hash: <span class="literal">false</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    ...config.devServer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中增加开发环境运行命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "cross-env NODE_ENV=development webpack-dev-server --config ./config/webpack.dev.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>npm run dev</code>看看效果吧。</p><h2 id="自动寻找空闲端口监听"><a href="#自动寻找空闲端口监听" class="headerlink" title="自动寻找空闲端口监听"></a>自动寻找空闲端口监听</h2><p>按照上述配置，如果<code>8080端口</code>已经被占用，则webpack开发服务器会报错退出，无法启动，我们可以利用<a href="https://github.com/http-party/node-portfinder" target="_blank" rel="noopener">portfinder</a>来自动搜索空闲的端口。</p><p>首先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D portfinder</span><br></pre></td></tr></table></figure><p>然后增加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>); <span class="comment">// 增加依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将module.exports = merge.smart()修改为如下形式 */</span></span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge.smart(<span class="comment">/* ... */</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 寻找可用端口，并返回一个promise类型的配置，webpack可以接收promise作为配置 */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = config.devServer.port;</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) reject(err)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      devWebpackConfig.devServer.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(devWebpackConfig)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不要关闭原有的server，再次运行<code>npm run dev</code>看看效果吧。</p><h1 id="自定义多环境"><a href="#自定义多环境" class="headerlink" title="自定义多环境"></a>自定义多环境</h1><p>一般来说，我们在开发应用的时候会面临多个环境差异的问题，例如，我们有：</p><ul><li>一个开发环境，提交代码即可立刻看到效果，它的接口地址可能是<code>http://dev-api.tianzhen.tech</code></li><li>一个测试环境，它需要保持一定程度的稳定性，每隔一小时发布一次新版本，接口地址可能是：<code>https://t1-api.tianzhen.tech</code></li><li>预发布环境，它与生产环境共享持久化数据，在这个环境做最后一次检查，等待发布</li><li>生产环境，他需要保持高度稳定，一周发布一个版本，接口地址可能是：<code>https://api-tianzhen.tech</code></li></ul><p>四套环境，不同的接口地址，不同的访问地址，可能还涉及到不同的微信、支付宝鉴权。</p><p>许多人采用的方案是这样的，写几个不同的配置文件，切换环境时修改引入的配置，但是这样做经常会忘记切环境导致生产事故。这里提供一套自动多环境的配置方案。</p><p>依然先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D dotenv dotenv-expand <span class="comment"># 从配置文件中读取并注入环境变量</span></span><br><span class="line">$ npm i -D interpolate-html-plugin <span class="comment"># 向模板注入环境变量</span></span><br></pre></td></tr></table></figure><p>在根目录下新建几个环境配置文件：<code>.env</code>，<code>.env.dev</code>，<code>.env.prod</code>，文件名的格式是固定的，符合 <code>.env[.name][.local]</code>即可，同名的配置会按照优先级覆盖或自动合并，例如环境名称是<code>dev</code>，那么优先级就是<code>.env.dev.local</code>，<code>.env.dev</code>，<code>.env.local</code>，<code>.env</code>，高优先级覆盖低优先级。</p><p>我们随意编写一个环境变量配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// .env.dev</span><br><span class="line">// 变量名要以 REACT_APP_ 开头</span><br><span class="line">REACT_APP_ENV=&apos;dev&apos;</span><br><span class="line">REACT_APP_API_ROOT=&apos;http://dev-api.tianzhen.tech&apos;</span><br></pre></td></tr></table></figure><p>在<code>config</code>目录下新建一个<code>env.js</code>文件，用这个脚本来读取环境变量配置，用于以后注入到react项目中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>);</span><br><span class="line"><span class="keyword">const</span> dotenvExpand = <span class="built_in">require</span>(<span class="string">'dotenv-expand'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = argv.env || <span class="string">'production'</span>;</span><br><span class="line"><span class="keyword">const</span> ENV_FILE_PATH = path.resolve(__dirname, <span class="string">'../.env'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dotenvFiles = [</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;ENV_FILE_PATH&#125;</span>.<span class="subst">$&#123;env&#125;</span>.local`</span>,</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;ENV_FILE_PATH&#125;</span>.<span class="subst">$&#123;env&#125;</span>`</span>,</span><br><span class="line">  env !== <span class="string">'test'</span> &amp;&amp; <span class="string">`<span class="subst">$&#123;ENV_FILE_PATH&#125;</span>.local`</span>,</span><br><span class="line">  ENV_FILE_PATH</span><br><span class="line">].filter(<span class="built_in">Boolean</span>);</span><br><span class="line"></span><br><span class="line">dotenvFiles.forEach(<span class="function">(<span class="params">dotenvFile</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(dotenvFile)) &#123;</span><br><span class="line">    dotenvExpand(dotenv.config(&#123;</span><br><span class="line">      path: dotenvFile</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> REACT_APP = <span class="regexp">/^REACT_APP_/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClientEnvironment</span>(<span class="params">publicUrl</span>) </span>&#123;</span><br><span class="line">  publicUrl = process.env.NODE_ENV === <span class="string">'production'</span> ? publicUrl.slice(<span class="number">0</span>, <span class="number">-1</span>) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> raw = <span class="built_in">Object</span>.keys(process.env)</span><br><span class="line">    .filter(<span class="function"><span class="params">key</span> =&gt;</span> REACT_APP.test(key))</span><br><span class="line">    .reduce(</span><br><span class="line">      (env, key) =&gt; &#123;</span><br><span class="line">        env[key] = process.env[key];</span><br><span class="line">        <span class="keyword">return</span> env;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        NODE_ENV: process.env.NODE_ENV || <span class="string">'production'</span>, <span class="comment">// webpack在production模式下会自动启用一些配置</span></span><br><span class="line">        APP_ENV: env,</span><br><span class="line">        PUBLIC_URL: publicUrl</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> stringified = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Object</span>.keys(raw).forEach(<span class="function">(<span class="params">key, index</span>) =&gt;</span> &#123;</span><br><span class="line">    stringified[<span class="string">'process.env.'</span> + key] = <span class="built_in">JSON</span>.stringify(raw[key]);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; raw, stringified &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getClientEnvironment;</span><br></pre></td></tr></table></figure><p>修改webpack配置，向react应用和index.html注入环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> InterpolateHtmlPlugin = <span class="built_in">require</span>(<span class="string">'interpolate-html-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> getClientEnvironment = <span class="built_in">require</span>(<span class="string">'./env'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = getClientEnvironment(config.publicPath);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(),</span><br><span class="line">  <span class="comment">// 注意：注入插件一定要在HtmlWebpackPlugin之后使用</span></span><br><span class="line">  <span class="comment">// 在html模板中能够使用环境变量</span></span><br><span class="line">  <span class="comment">// &lt;link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico"&gt;</span></span><br><span class="line">  <span class="keyword">new</span> InterpolateHtmlPlugin(env.raw),</span><br><span class="line">  <span class="comment">// 在js代码中能够使用环境变量(demo: process.env.REACT_APP_ENV === 'dev')</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(env.stringified),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置都做好了，如何让打包命令知道当前用的哪个环境呢，我们修改一下打包命令，加上<code>env</code>参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "cross-env NODE_ENV=development webpack-dev-server --config ./config/webpack.dev.js --env=dev",</span><br><span class="line">  "build:prod": "cross-env NODE_ENV=production node config/build.js --env=prod --report",</span><br><span class="line">  "build:t1": "cross-env NODE_ENV=production node config/build.js --env=t1 --report",</span><br><span class="line">  "build:dev": "cross-env NODE_ENV=production node config/build.js --env=dev --report"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把同样的配置，分别配置到<code>webpack.prod.js</code>和<code>webpack.dev.js</code>中，然后运行对应打包命令，就可以看到项目中成功注入了环境变量。例如，想要使用<code>.env.dev</code>中的变量，则打包命令中增加参数<code>--env=dev</code>即可，配置将由<code>.env.dev.local</code>，<code>.env.dev</code>，<code>.env.local</code>，<code>.env</code>合并覆盖生成。</p><blockquote><p>webpack根据<code>NODE_ENV</code>的值来自动选择<code>production</code>或<code>development</code>模式编译，因此，如果没有必须要求，尽量不要以<code>NODE_ENV</code>的值做为打包环境依据，否则就要自行处理更复杂的webpack配置。</p></blockquote><h1 id="preload，prefetch"><a href="#preload，prefetch" class="headerlink" title="preload，prefetch"></a>preload，prefetch</h1><p>preload和prefetch是一组能够预读资源，优化用户体验的工具，这里给出一个在首页预读字体和图片的例子，来演示它们结合webpack的使用方法，详见<a href="https://github.com/GoogleChromeLabs/preload-webpack-plugin" target="_blank" rel="noopener">文档</a>。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D preload-webpack-plugin</span><br></pre></td></tr></table></figure><p>修改<code>webpack.prod.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PreloadWebpackPlugin = <span class="built_in">require</span>(<span class="string">'preload-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> PreloadWebpackPlugin(&#123;</span><br><span class="line">    rel: <span class="string">'preload'</span>,</span><br><span class="line">    <span class="keyword">as</span>(entry) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/\.css$/</span>.test(entry)) <span class="keyword">return</span> <span class="string">'style'</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/\.woff$/</span>.test(entry)) <span class="keyword">return</span> <span class="string">'font'</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/\.png$/</span>.test(entry)) <span class="keyword">return</span> <span class="string">'image'</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'script'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    include: [<span class="string">'app'</span>]</span><br><span class="line">    <span class="comment">// include:'allChunks'</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="配置按需加载"><a href="#配置按需加载" class="headerlink" title="配置按需加载"></a>配置按需加载</h1><p>配置按需加载，可以将每个页面或组件拆成独立的包，减小首页加载内容的体积，是很好的优化策略。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/plugin-syntax-dynamic-import</span><br></pre></td></tr></table></figure><p>修改<code>webpack.base.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(j|t)sx?$/</span>,</span><br><span class="line">  include: APP_PATH,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="string">'@babel/plugin-syntax-dynamic-import'</span>, <span class="comment">// 这是新加入的项</span></span><br><span class="line">          [<span class="string">'@babel/plugin-proposal-class-properties'</span>, &#123; <span class="string">'loose'</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">        ],</span><br><span class="line">        cacheDirectory: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完后，就可以用<code>import</code>的方式载入组件了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo</span></span><br><span class="line"><span class="keyword">const</span> HelloWorldPage = <span class="keyword">import</span>(<span class="string">'@/pages/demo/HelloWorldDemo/HelloWorldDemoPage'</span>);</span><br></pre></td></tr></table></figure><p>至此，脚手架已经基本可以使用，并且完成了一部分优化。接下来的文章内容主要是围绕开发体验和团队规范展开的，还会涉及到一个比较优秀的react路由实践。</p>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(三)</title>
      <link href="/2019/10/03/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%B8%89)/"/>
      <url>/2019/10/03/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h1><p>js的打包基本处理完了，还有图片、音频等静态资源需要处理。</p><p>依然先装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D url-loader file-loader</span><br><span class="line">$ npm i -D @svgr/webpack <span class="comment"># 顺带支持一下导入svg图片</span></span><br></pre></td></tr></table></figure><p>增加webpack配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  use: [<span class="string">'@svgr/webpack'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(jpg|jpeg|bmp|png|webp|gif)$/</span>,</span><br><span class="line">  loader: <span class="string">'url-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    limit: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">// 小于这个大小的图片，会自动base64编码后插入到代码中</span></span><br><span class="line">    name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">    outputPath: config.assetsDirectory,</span><br><span class="line">    publicPath: config.assetsRoot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 下面这个配置必须放在最后</span></span><br><span class="line">&#123;</span><br><span class="line">  exclude: [<span class="regexp">/\.(js|mjs|ts|tsx|less|css|jsx)$/</span>, /\.html$/, /\.json$/],</span><br><span class="line">  loader: <span class="string">'file-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    name: <span class="string">'media/[path][name].[hash:8].[ext]'</span>,</span><br><span class="line">    outputPath: config.assetsDirectory,</span><br><span class="line">    publicPath: config.assetsRoot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips: 生产环境需要合理使用缓存，需要拷贝一份同样的配置在<code>webpack.prod.js</code>中，并将name中的<code>hash</code>改为<code>contenthash</code></p></blockquote><a id="more"></a><p>接下来我们要把<code>public</code>目录里除了<code>index.html</code>以外的文件都拷贝一份到打包目录中：</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D copy-webpack-plugin</span><br></pre></td></tr></table></figure><p>增加配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// ...other plugins</span></span><br><span class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">'public'</span>,</span><br><span class="line">      ignore: [<span class="string">'index.html'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="提取公共模块，拆分代码"><a href="#提取公共模块，拆分代码" class="headerlink" title="提取公共模块，拆分代码"></a>提取公共模块，拆分代码</h1><p>有些模块是公共的，如果不把他拆分出来，那么他会在每一个被引入的模块中出现，我们需要优化与此相关的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">entry: &#123;</span><br><span class="line">  app: <span class="string">'./src/index.tsx'</span>,</span><br><span class="line">  vendor: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>] <span class="comment">// 不变的代码分包</span></span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">'all'</span>,</span><br><span class="line">    minChunks: <span class="number">2</span>,</span><br><span class="line">    maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      <span class="comment">// 提取公共模块</span></span><br><span class="line">      commons: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">        test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        minChunks: <span class="number">2</span>,</span><br><span class="line">        maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">        minSize: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">'common'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩代码（2019-9-18更新）"><a href="#压缩代码（2019-9-18更新）" class="headerlink" title="压缩代码（2019/9/18更新）"></a>压缩代码（2019/9/18更新）</h1><p>通过使用打包分析工具，我们会发现打出来的包都很大，远不能满足生产环境的体积要求，因此还需要对代码进行压缩。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D uglifyjs-webpack-plugin mini-css-extract-plugin compression-webpack-plugin</span><br></pre></td></tr></table></figure><p>增加和修改配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> UglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    MiniCssExtractPlugin.loader, <span class="comment">// 注意书写的顺序</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'postcss-loader'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...configs</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: config.indexPath,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">      useShortDoctype: <span class="literal">true</span>,</span><br><span class="line">      removeOptionalTags: <span class="literal">false</span>,</span><br><span class="line">      removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">      removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">      removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">      removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      removeCommentsFromCDATA: <span class="literal">true</span>,</span><br><span class="line">      keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">      minifyJS: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'css/[name].[contenthash:8].css'</span></span><br><span class="line">    <span class="comment">// chunkFilename: '[name].[contenthash:8].chunk.css'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// gzip压缩</span></span><br><span class="line">  <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">    algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">    test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.('</span> + productionGzipExtensions.join(<span class="string">'|'</span>) + <span class="string">')$'</span>),</span><br><span class="line">    threshold: <span class="number">10240</span>, <span class="comment">// 大于这个大小的文件才会被压缩</span></span><br><span class="line">    minRatio: <span class="number">0.8</span></span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br><span class="line">optimization: &#123;</span><br><span class="line">  minimizer: [</span><br><span class="line">    <span class="keyword">new</span> UglifyjsWebpackPlugin(&#123;</span><br><span class="line">      sourceMap: config.productionJsSourceMap</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行打包命令，查看打包好的文件，可以看到代码都被压缩好了。</p><h2 id="使用terser"><a href="#使用terser" class="headerlink" title="使用terser"></a>使用terser</h2><p>由于<code>uglify-es</code>已经停止维护，所以改用目前比较流行的<code>terser</code>来压缩js代码。我们仅需做几处简单的修改。</p><p>首先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D terser-webpack-plugin</span><br></pre></td></tr></table></figure><p>然后改写<code>webpack.prod.js</code>即可:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const UglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin');</span></span><br><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">optimization: &#123;</span><br><span class="line">  minimizer: [</span><br><span class="line">    <span class="comment">// new UglifyjsWebpackPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   sourceMap: config.productionJsSourceMap</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">      sourceMap: config.productionJsSourceMap</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(二)</title>
      <link href="/2019/10/02/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%BA%8C)/"/>
      <url>/2019/10/02/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="完善webpack打包配置"><a href="#完善webpack打包配置" class="headerlink" title="完善webpack打包配置"></a>完善webpack打包配置</h1><p>有了webpack的基础配置，还不足以支持打生产环境能够使用的包，我们还需要增加一些配置。</p><p>首先，每次打包前最好能把上一次生成的文件删除，这里可以用<a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a>插件实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>然后修改webpack基础配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生产环境，我们希望部署新版本后能够丢弃缓存，又希望保留没有被改动的文件的缓存，而在开发环境，我们希望完全不使用缓存，因此我们需要在当前配置的基础上，分别扩展生产和开发两套配置。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js 生产环境打包配置</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge.smart(baseWebpackConfig, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: sourceMapsMode,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:8].js'</span>, <span class="comment">// contenthash：只有模块的内容改变，才会改变hash值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js 开发环境的配置</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge.smart(baseWebpackConfig, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[hash:8].js'</span>,</span><br><span class="line">    publicPath: config.publicPath <span class="comment">// 这里可以省略</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们编辑<code>build.js</code>，让打包程序真正能够运行起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/build.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod'</span>);</span><br><span class="line"></span><br><span class="line">webpack(webpackConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>安装工具并添加启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cross-env</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config ./config/webpack.dev.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production node config/build.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行打包命令，就能看到新生成的dist目录中有已经打包好的文件了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><h1 id="打包分析工具"><a href="#打包分析工具" class="headerlink" title="打包分析工具"></a>打包分析工具</h1><p>包是打出来了，但是打包好的文件构成是什么样呢，有没有按照我们的需要正确打包呢，我们需要一个分析工具来帮助判断，这就是<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><p>我们希望根据打包的命令参数，在打包时自动生成或不生成分析报告。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundleAnalyzerReport = argv.report; <span class="comment">// 根据命令参数是否含有 'report' 来决定是否生成报告</span></span><br><span class="line"><span class="comment">// 这个配置将合并到最后的配置中</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (bundleAnalyzerReport) &#123;</span><br><span class="line">  webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">    analyzerMode: <span class="string">'static'</span>,</span><br><span class="line">    openAnalyzer: <span class="literal">false</span>,</span><br><span class="line">    reportFilename: path.join(config.assetsRoot, <span class="string">'./report.html'</span>)</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改用merge来合并配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(webpackConfig, &#123;</span><br><span class="line">  <span class="comment">// ...configs</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>打包命令中增加参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "cross-env NODE_ENV=production node config/build.js --report"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>运行<code>npm run build</code>，生成的dist目录中会有一个report.html文件，就是我们的分析报告。</p><h1 id="支持less和css-modules"><a href="#支持less和css-modules" class="headerlink" title="支持less和css modules"></a>支持less和css modules</h1><p>现在我们使脚手架支持css，less和css modules：</p><p>先装工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D style-loader css-loader less less-loader</span><br></pre></td></tr></table></figure><p>增加配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      oneOf: [</span><br><span class="line">        <span class="comment">// ... configs</span></span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'css-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                modules: <span class="literal">false</span> <span class="comment">// 如果要启用css modules，改为true即可</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'less-loader'</span>,</span><br><span class="line">              options: &#123; <span class="attr">javascriptEnabled</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="提取css"><a href="#提取css" class="headerlink" title="提取css"></a>提取css</h1><p>我们发现打包好的文件中并没有css，但是css却可以正常工作，这是因为webpack并没有把样式从js中剥离出来。</p><p>为了方便管理静态资源，充分利用缓存，我们需要将css单独打包。</p><p>先安装工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><p>增加打包配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...webpack configs</span></span><br><span class="line">optimization: &#123;</span><br><span class="line">  minimizer: [</span><br><span class="line">    <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">      cssProcessorOptions: <span class="literal">true</span> ? &#123; <span class="attr">map</span>: &#123; <span class="attr">inline</span>: <span class="literal">false</span> &#125;&#125; : &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行打包命令，就能看到生成的css文件。</p><h1 id="自动增加css前缀"><a href="#自动增加css前缀" class="headerlink" title="自动增加css前缀"></a>自动增加css前缀</h1><p>使用<a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">postcss</a>，可以自动为css增加浏览器前缀。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure><p>增加webpack配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js，webpack.prod.js</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        modules: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'postcss-loader'</span>, <span class="comment">// 注意插入的位置，webpack.prod.js也要加这一项！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123; <span class="attr">javascriptEnabled</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在根目录新建<code>postcss.config.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中增加配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"browserslist": [</span><br><span class="line">  "&gt; 1%",</span><br><span class="line">  "last 2 versions",</span><br><span class="line">  "not ie &lt;= 8",</span><br><span class="line">  "iOS &gt;= 8",</span><br><span class="line">  "Firefox &gt;= 20",</span><br><span class="line">  <span class="string">"Android &gt; 4.4"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="postcss-px-to-viewport示例"><a href="#postcss-px-to-viewport示例" class="headerlink" title="postcss-px-to-viewport示例"></a>postcss-px-to-viewport示例</h1><p>这里提供一个利用postcss做基于vh，vw布局的配置例子。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg</span><br><span class="line">$ npm i -D cssnano cssnano-preset-advanced</span><br></pre></td></tr></table></figure><p>修改<code>postcss.config.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-aspect-ratio-mini'</span>: &#123;&#125;, <span class="comment">// 处理元素容器的宽高比</span></span><br><span class="line">    <span class="string">'postcss-write-svg'</span>: &#123; <span class="comment">//处理1px边框</span></span><br><span class="line">      utf8: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'postcss-px-to-viewport'</span>: &#123;</span><br><span class="line">      viewportWidth: <span class="number">750</span>,</span><br><span class="line">      viewportHeight: <span class="number">1334</span>,</span><br><span class="line">      unitPrecision: <span class="number">3</span>,</span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>,</span><br><span class="line">      selectorBlackList: [<span class="string">'.ignore'</span>, <span class="string">'.hairlines'</span>],</span><br><span class="line">      minPixelValue: <span class="number">1</span>,</span><br><span class="line">      mediaQuery: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    cssnano: &#123;</span><br><span class="line">      <span class="string">'cssnano-preset-advanced'</span>: &#123;</span><br><span class="line">        zindex: <span class="literal">false</span>, <span class="comment">// 这里一定要关掉，否则所有的z-index会被设为1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    autoprefixer: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置完成后，如果是基于750px宽度设计图，那么设计图上1px就直接在样式中写1px即可，打包时会自动转为vw单位。</p>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建webpack4+react+typescript+eslint脚手架(一)</title>
      <link href="/2019/10/01/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%B8%80)/"/>
      <url>/2019/10/01/2019/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAwebpack4+react+typescript+eslint%E8%84%9A%E6%89%8B%E6%9E%B6(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>项目github仓库地址： <a href="https://github.com/mecoepcoo/ts-react-boilerplate" target="_blank" rel="noopener">https://github.com/mecoepcoo/ts-react-boilerplate</a></p></blockquote><p>这个系列的文章主要讲述如何从一个空目录建立<strong>webpack+react+typescript+eslint</strong>脚手架，书写此文时各主要工具的版本为：</p><ul><li>webpack <code>v4</code></li><li>react <code>v16.9</code></li><li>typescript <code>v3.5</code></li><li>babel <code>v7</code></li><li>eslint <code>v6.2</code></li></ul><p>本文涉及的内容大致包含：</p><ul><li>webpack的配置</li><li>对静态资源（图片，模板等）的处理</li><li>使react项目支持typescript，eslint，prettier等工具</li><li>优化webpack配置，减小代码的体积</li><li>支持不同的css预处理器（less，sass等）</li><li>一套好用的样式方案</li><li>使项目支持多个环境切换（开发，测试，预发布，生产等）</li><li>使用规则来自动约束代码规范</li><li>优化开发体验</li><li>一些优化项目性能的建议</li></ul><p>阅读这个系列的文章需要具备的条件：</p><ul><li>你使用过<code>vue</code>，<code>react</code>或<code>angular</code>等任意一种前端框架</li><li>你了解过<code>vue-cli</code>，<code>create-react-app</code>，<code>angular-cli</code>等任意一种脚手架生成工具</li><li>你了解<code>webpack</code>的基本原理或用法</li><li>你有生产环境代码的开发经验，了解生产环境中的代码与自娱自乐代码的区别</li></ul><a id="more"></a><blockquote><p>Why not <a href="https://create-react-app.dev/" target="_blank" rel="noopener">create-react-app</a>?</p><p>笔者使用<strong>CRA</strong>新建项目时，觉得自定义程度不够。尝试过 <code>react-app-rewired + customize-cra</code> 的方案，还是觉得异常繁琐，而且会消耗额外的维护精力，<strong>鲁迅说</strong>：青年应当有朝气，敢作为，遂自行搭建一个 boilerplate 。</p></blockquote><h1 id="初始化目录"><a href="#初始化目录" class="headerlink" title="初始化目录"></a>初始化目录</h1><p>我们要从一个空目录开始，先新建这个目录，做一些必要的初始化工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my-react</span><br><span class="line">$ <span class="built_in">cd</span> my-react</span><br><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>新建如下目录结构：</p><p>react-project</p><ul><li>config <code>打包配置</code></li><li>public <code>静态文件夹</code><ul><li>index.html</li><li>favicon.ico</li></ul></li><li>src <code>源码目录</code></li></ul><h1 id="规范git提交"><a href="#规范git提交" class="headerlink" title="规范git提交"></a>规范git提交</h1><p>协作开发时，git提交的内容如果没有规范，就不好管理项目，我们用 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> + <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener">commitlint</a> 来规范git提交。</p><p>我们先在根目录下建立 <code>.gitignore</code> 文件，忽略不需要要的文件。</p><p>然后安装工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D husky</span><br><span class="line">$ npm i -D @commitlint/cli</span><br></pre></td></tr></table></figure><blockquote><p>husky 会为 git 增加钩子，在 commit 时执行一系列操作，commitlint 可以检查 git message 是否符合规则。</p></blockquote><p>在 <code>package.json</code> 中增加配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在根目录新建文件 <code>.commitlintrc.js</code>，根据具体情况配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parserPreset: &#123;</span><br><span class="line">    parserOpts: &#123;</span><br><span class="line">      headerPattern: <span class="regexp">/^(\w*)(?:\((.*)\))?:\s(.*)$/</span>,</span><br><span class="line">      headerCorrespondence: [<span class="string">'type'</span>, <span class="string">'scope'</span>, <span class="string">'subject'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'type-empty'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'type-case'</span>: [<span class="number">2</span>, <span class="string">'always'</span>, <span class="string">'lower-case'</span>],</span><br><span class="line">    <span class="string">'subject-empty'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'type-enum'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      [<span class="string">'feat'</span>, <span class="string">'fix'</span>, <span class="string">'update'</span>, <span class="string">'docs'</span>, <span class="string">'style'</span>, <span class="string">'refactor'</span>, <span class="string">'test'</span>, <span class="string">'chore'</span>, <span class="string">'release'</span>, <span class="string">'revert'</span>]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样即可完成配置，具体的使用方法参考 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener">commitlint文档</a></p><h1 id="React-hello-world"><a href="#React-hello-world" class="headerlink" title="React hello, world"></a>React hello, world</h1><p>安装react，写一个react hello, world</p><p>现在让主角 React 登场：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i react react-dom</span><br></pre></td></tr></table></figure><p>新建一个 <code>hello, world</code> 结构，这里直接用ts书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// src/index.tsx</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">import &apos;./style.css&apos;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// src/App.tsx</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &apos;./app.css&apos;;</span><br><span class="line"></span><br><span class="line">const App: React.FC = () =&gt; &#123;</span><br><span class="line">  return (&lt;div&gt;hello, world&lt;/div&gt;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>我们还需要一个html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public/index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/favicon.ico"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>react-app<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的结构参考 <a href="https://github.com/mecoepcoo/ts-react-boilerplate" target="_blank" rel="noopener">代码示例</a></p><h1 id="webpack的基本配置"><a href="#webpack的基本配置" class="headerlink" title="webpack的基本配置"></a>webpack的基本配置</h1><p>安装webpack相关工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D webpack webpack-cli webpack-dev-server webpack-merge</span><br></pre></td></tr></table></figure><p>在 config 目录下新建几个文件：<code>config.js</code>, <code>webpack.base.js</code>, <code>webpack.prod.js</code>, <code>webpack.dev.js</code>, <code>build.js</code></p><p>先抽取一些通用的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  assetsRoot: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  assetsDirectory: <span class="string">'static'</span>,</span><br><span class="line">  publicPath: <span class="string">'/'</span>,</span><br><span class="line">  indexPath: path.resolve(__dirname, <span class="string">'../public/index.html'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.tsx'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].bundle.js'</span>,</span><br><span class="line">    path: config.assetsRoot,</span><br><span class="line">    publicPath: config.publicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.tsx'</span>] <span class="comment">// 自动判断后缀名，引入时可以不带后缀</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="babel和typescript，路径别名"><a href="#babel和typescript，路径别名" class="headerlink" title="babel和typescript，路径别名"></a>babel和typescript，路径别名</h1><p>接下来我们需要让webpack支持typescript，并且将代码转换为es5，这样才能在低版本的浏览器上运行。</p><p>依然是先安装工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/polyfill</span><br><span class="line">$ npm i core-js@2 <span class="comment"># babel的按需引入依赖</span></span><br><span class="line">$ npm i -D @babel/plugin-proposal-class-properties <span class="comment"># 能够在class中自动绑定this的指向</span></span><br><span class="line">$ npm i -D typescript awesome-typescript-loader <span class="comment"># 处理ts，主要就靠它</span></span><br><span class="line">$ npm i -D html-loader html-webpack-plugin <span class="comment"># 顺便把html的支持做好</span></span><br></pre></td></tr></table></figure><p>用了ts，就要有一个tsconfig配置，在根目录新建 <code>tsconfig.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"dom.iterable"</span>,</span><br><span class="line">      <span class="string">"esnext"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"typeRoots"</span>: [</span><br><span class="line">      <span class="string">"src/types"</span> // 指定 d.ts 文件的位置，根据具体情况修改</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"skipLibCheck"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"esnext"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"resolveJsonModule"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"src"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"./node_modules"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来配一下webpack：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line"><span class="keyword">const</span> APP_PATH = path.resolve(__dirname, <span class="string">'../src'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      oneOf: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(html)$/</span>,</span><br><span class="line">          loader: <span class="string">'html-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(j|t)sx?$/</span>,</span><br><span class="line">          include: APP_PATH,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                presets: [</span><br><span class="line">                  <span class="string">'@babel/preset-react'</span>,  <span class="comment">// jsx支持</span></span><br><span class="line">                  [<span class="string">'@babel/preset-env'</span>, &#123; <span class="attr">useBuiltIns</span>: <span class="string">'usage'</span>, <span class="attr">corejs</span>: <span class="number">2</span> &#125;] <span class="comment">// 按需使用polyfill</span></span><br><span class="line">                ],</span><br><span class="line">                plugins: [</span><br><span class="line">                  [<span class="string">'@babel/plugin-proposal-class-properties'</span>, &#123; <span class="string">'loose'</span>: <span class="literal">true</span> &#125;] <span class="comment">// class中的箭头函数中的this指向组件</span></span><br><span class="line">                ],</span><br><span class="line">                cacheDirectory: <span class="literal">true</span> <span class="comment">// 加快编译速度</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">'awesome-typescript-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    template: config.indexPath,</span><br><span class="line">    showErrors: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br><span class="line">optimization: &#123;&#125;</span><br></pre></td></tr></table></figure><p>为了以后开发时引入路径方便，我们加个路径别名的配置，需要改webpack配置和tsconfig两处：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.js</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.tsx'</span>],</span><br><span class="line">  alias: &#123;</span><br><span class="line">   <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'../src/'</span>) <span class="comment">// 以 @ 表示src目录</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    "paths": &#123;</span><br><span class="line">      "@/*": ["src/*"]</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们完成了最最基本的webpack配置，但暂时还不能打包。</p>]]></content>
      
      
      <categories>
          
          <category> 从零搭建webpack4+react+typescript+eslint脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker部署mysql本地开发环境</title>
      <link href="/2019/10/01/2019/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2mysql%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/10/01/2019/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2mysql%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何使用docker在本地搭建一个简单的mysql开发环境。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>使用本文用例需要预先安装好docker，windows用户直接下载windows版本的docker客户端即可，使用linux容器或windows容器都不影响结果。</p><h1 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h1><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3308:3306 -v /home/dev-enviroment/:/var/lib/mysql -d -e MYSQL_ROOT_PASSWORD=1234 mysql</span><br></pre></td></tr></table></figure><p>这句命令的意思是，使用docker启动一个名为mysql的容器，如果本地没有这个容器，则从远程仓库中寻找，容器启动后，将容器内的3306端口映射到宿主机的3308端口，并将容器内的<code>/var/lib/mysql</code>目录映射到宿主机的<code>/home/dev0enviroment</code>目录，<code>-d</code>表示在后台运行，容器启动后仅返回容器id，<code>-e</code>表示配置环境变量</p><p>注意：windows用户使用cmd, powershell或者gitbash等不用的命令行工具时，需要输入的路径可能不同，视终端和容器类型而定，可以尝试<code>d:/dev</code>或者<code>/d/dev</code>等形式。</p><h1 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h1><p>对于容器内服务来说，宿主机是一台远程主机，需要修改配置以支持数据库连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it 01873d bash <span class="comment"># 以交互模式进入容器，并运行bash，这里的01873d是container id的前几位</span></span><br><span class="line"><span class="comment"># windows用户需要以管理员身份运行，如果在cmd中无法进入，可尝试使用git bash等工具，如果提示要加前缀，就在docker命令前增加前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mysql命令行</span></span><br><span class="line">$ mysql -uroot -p1234</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 允许远程连接</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment">-- 更新权限配置</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"><span class="comment">-- 修改加密模式（navicat等不支持默认模式）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span> <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="keyword">NEVER</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'1234'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>现在打开navicat等工具，连接<code>localhost:3308</code>即可访问数据库了。</p><p>如果docker被关闭，只需要运行以下命令就可以恢复数据库服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line"><span class="comment"># 从列出的容器列表中找出mysql的容器id</span></span><br><span class="line">$ docker restart id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云容器 </tag>
            
            <tag> docker </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决windows下控制台和git输出乱码的问题</title>
      <link href="/2019/09/27/2019/%E8%A7%A3%E5%86%B3windows%E4%B8%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%92%8Cgit%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/27/2019/%E8%A7%A3%E5%86%B3windows%E4%B8%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%92%8Cgit%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Win 系统的控制台默认编码不是utf-8，使用vscode，git bash等工具时经常在控制台看到乱码。</p><p>调整这些配置，就能让控制台正确显示中文。</p><ol><li>使用 git bash 等工具时，先打开工具的设置，找找设置里有没有文本编码（character set）相关的选项，设置为”UTF-8”即可</li><li>快捷键 <code>win+R</code> 打开运行，输入 <code>regedit</code> 回车，打开注册表编辑器，找到<code>HKEY_CURRENT_USER\Console\</code>在里面的每一项中，新建名为<code>CodePage</code>（如果已有则修改）的DWORD值，数值设为十进制65001即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发环境 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-canvas本地与docker安装</title>
      <link href="/2019/07/13/2019/node-canvas%E6%9C%AC%E5%9C%B0%E4%B8%8Edocker%E5%AE%89%E8%A3%85/"/>
      <url>/2019/07/13/2019/node-canvas%E6%9C%AC%E5%9C%B0%E4%B8%8Edocker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>node-canvas 是 node 环境用来绘制图形的工具，我在 windows 10 环境和 docker 中 node-alpine 安装此工具时遇到了一些困难，以此文记录 trouble shooting 经历。</p><a id="more"></a><h1 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h1><p>在 node:10-alpine 镜像中安装 canvas，运行 <code>npm i canvas</code> ，报错缺失 python，查询资料后发现依赖 python2 环境。</p><p>运行 <code>apk add python2</code> 后安装 canvas，依然报错，发现还需要其他依赖，遂继续查询更多相关资料（源码仓库+搜索引擎+issue）得知，canvas 预编译了一些常见系统的二进制码，当没有找到匹配的预编译码时，会自动fallback执行编译（npm install –build-from-source），编译时各种报错，分析后认为是缺少依赖所致，但是从何而知缺少了哪些依赖呢，第一反应是在项目的 issue 搜索报错相关内容，查看后发现并没有特别有价值的解法，随后看到一条 issue，想让作者提供一个 dockerfile 以供容器中使用，于是想到作者可能编写了 ci 相关内容。</p><p>查看项目根目录，果然发现有一个 ci 文件 <a href="https://github.com/Automattic/node-canvas/blob/master/.travis.yml" target="_blank" rel="noopener">.travis.yml</a><br>里面列出了用到的依赖为 libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev librsvg2-dev g++-4.9，通过查询资料，得知 alpine 的 apk 包管理工具中对应的依赖名分别为：</p><ul><li>g++</li><li>cairo-dev</li><li>jpeg-dev</li><li>pango-dev</li><li>giflib-dev</li></ul><p>如果是 ubuntu 等操作系统，可以用 apt-get，yum 等工具安装。</p><p>由于需要编译，增加 build-base 库，最后得到dockerfile命令如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g node-gyp \</span></span><br><span class="line"><span class="bash">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"http://mirrors.aliyun.com/alpine/v3.7/main"</span> &gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">  &amp;&amp; <span class="built_in">echo</span> <span class="string">"http://mirrors.aliyun.com/alpine/v3.7/community"</span> &gt;&gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apk update \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apk add --no-cache build-base g++ cairo-dev jpeg-dev pango-dev giflib-dev \</span></span><br><span class="line"><span class="bash">  &amp;&amp; npm install canvas</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：<br>如果依赖已经装全仍无法成功安装，可以尝试调整 nodejs 或 canvas 版本。</p></blockquote><p>安装完毕之后，运行项目测试绘图，报 <code>symbol not found</code> 错误，搜索 issue 和错误提示后，猜测是和项目中已有的 shape.js 冲突导致，移除全部 shape 相关代码，测试绘图，成功运行。</p><blockquote><p>❤️ 总结：</p><ol><li>读取预编译文件时会执行编译</li><li>编译需要用到 g++ ，make，node-gyp</li><li>需要完整安装各种依赖</li><li>与 shapre.js 不能共存 (<a href="mailto:canvas@2.6.0" target="_blank" rel="noopener">canvas@2.6.0</a>)</li><li>python 版本必须是 2.7</li></ol></blockquote><h1 id="Windows-10-安装"><a href="#Windows-10-安装" class="headerlink" title="Windows 10 安装"></a>Windows 10 安装</h1><p>如果读取不到预编译文件，在 win10 下依然需要编译，通过搜索可以得到各种解法，以下提供一种较简单的编译安装方法。</p><h2 id="安装-node-gyp"><a href="#安装-node-gyp" class="headerlink" title="安装 node-gyp"></a>安装 node-gyp</h2><p>这是必备组件，需要全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g node-gyp</span></span><br></pre></td></tr></table></figure><h2 id="安装-chocolatey-和依赖"><a href="#安装-chocolatey-和依赖" class="headerlink" title="安装 chocolatey 和依赖"></a>安装 chocolatey 和依赖</h2><p><a href="https://chocolatey.org/" target="_blank" rel="noopener">chocolatey</a> 是 windows 下的包管理工具，可以用它下载管理各种软件。</p><p>访问官网查询安装方式，提供了 cmd 和 powershell 两种安装方式。</p><p>安装好后，继续安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> choco install -y python2 gtk-runtime microsoft-build-tools libjpeg-turbo</span></span><br></pre></td></tr></table></figure><h2 id="安装-GTK-工具"><a href="#安装-GTK-工具" class="headerlink" title="安装 GTK 工具"></a>安装 GTK 工具</h2><p>canvas 依赖 cairo ，GTK 中包含了 cairo，因此我们需要安装 GTK2，去 GTK 官网下载，然后解压缩到 <code>C:\GTK</code>。如果不想解压到 c 盘，那么需要修改路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node-gyp rebuild --GTK_Root=C:\\somewhere\\GTK</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：<br>GTK3 中没有 libpng，因此必须选择 GTK2。</p></blockquote><p>接下来运行 <code>npm i canvas</code>，应该可以顺利安装。</p><blockquote><p>❤️ 总结：</p><ol><li>需要 node-gyp 来编译</li><li>用 choco 安装依赖比较方便，py 还是 2.7</li><li>GTK2，而不是3</li><li>如果不用 choco 安装依赖，可以装个 visual studio，或者用 npm 全局安装 windows-build-tools</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云容器 </tag>
            
            <tag> docker </tag>
            
            <tag> nodejs </tag>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步你的vs-code配置</title>
      <link href="/2019/05/02/2019/%E5%90%8C%E6%AD%A5%E4%BD%A0%E7%9A%84vs-code%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/05/02/2019/%E5%90%8C%E6%AD%A5%E4%BD%A0%E7%9A%84vs-code%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在不同的设备上使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vs code</a>，配置可能会不一样，比如eslint工具，各种插件的配置。使用 vs code 的 <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> 插件就可以简单地同步配置。</p><p>这个插件的原理其实就是利用 <a href="https://gist.github.com/" target="_blank" rel="noopener">github gist</a>（代码片段功能）来保存和同步配置信息。</p><ol><li>在 vsc 中找到“插件(Extensions)”，搜索 Settings Sync （输入settings即可），找到插件点击安装。</li><li>使用快捷键：shift+alt+u (macbook是option键) 上传配置，首次使用将会看到一个界面，选择 “login with github”，登录 github 账号后，点击下方按钮来自动创建 gist。</li><li>在另一台电脑上，安装 Settings Sync 插件，同样登录到 github，这时会让你选择已有的 gist，从给出的列表中选出刚才创建好的 gist，即可完成绑定。</li><li>使用快捷键：shift+alt+d 来下载配置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发环境 </tag>
            
            <tag> IDE </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建docker私有镜像仓库</title>
      <link href="/2019/02/06/2019/%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
      <url>/2019/02/06/2019/%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>本文记录如何使用registry镜像创建docker私有仓库，并试验将一个本地镜像推送到私有仓库。</p><h1 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h1><p>docker官方提供了一个registry镜像供我们搭建本地私有的仓库环境。</p><p>执行命令，这个命令会自动下载registry容器，并创建私有仓库服务。仓库默认被创建在<code>/tmp/registry</code>下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 5000:5000 registry</span></span><br></pre></td></tr></table></figure><p>用这种方式创建，一旦容器被删除，则镜像也会丢失。我们也可以指定一个其他目录来创建仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 看一下端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -nlp</span></span><br></pre></td></tr></table></figure><p>现在本地已经在5000端口自动启动了一个私有仓库服务。</p><a id="more"></a><h1 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h1><p>接下来我们push一个镜像到刚刚搭建的私有仓库，试试灵不灵。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull hello-world</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打个标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker tag hello-world:latest 127.0.0.1:5000/myhello-world:latest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docekr images</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这两个hello-world镜像实际上指向的是同一个镜像文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送到私有仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker push 127.0.0.1:5000/myhello-world:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证一下是否成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> api文档：https://docs.docker.com/registry/spec/api/<span class="comment">#listing-repositories</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XGET http://127.0.0.1:5000/v2/_catalog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull 127.0.0.1:5000/myhello-world:latest</span></span><br></pre></td></tr></table></figure><p>这样就搞定了。</p>]]></content>
      
      
      <categories>
          
          <category> 云容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云容器 </tag>
            
            <tag> docker </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建github+jenkins+docker持续集成环境</title>
      <link href="/2018/12/01/2018/%E6%90%AD%E5%BB%BAgithub+jenkins+docker%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/12/01/2018/%E6%90%AD%E5%BB%BAgithub+jenkins+docker%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>使用jenkins+github+docker是一个很常用的持续集成、持续交付方案了，这篇文章描述了搭建这套系统的流程，记录了一些坑点。</p><h1 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h1><ol><li>在’setting’里找到配置SSH key的地方：<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></li><li>根据<a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">文档</a>，<a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">新建</a>或<a href="https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener">使用一个已有的key</a></li><li>在<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">开发设置(setting-Developer settings-)</a>中配置一个带权限的access_token，注意，’repo’和’admin:repo hook’这两项是必选的，这个简单</li></ol><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><ol><li>阅读官方CentOS<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">安装文档</a>，按步骤装，简单的很</li></ol><h1 id="安装jdk8"><a href="#安装jdk8" class="headerlink" title="安装jdk8"></a>安装jdk8</h1><ol><li>上<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">java官网</a>下一个，然后安装，配环境变量，比上面更简单</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载解压（注意用wget要先点下载，然后把带auth参数的链接放到wget）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget jdk-download-url</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf jdk-8u60-linux-x64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -r jdk1.8.0_201 /usr/java/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/profile</span></span><br></pre></td></tr></table></figure><p>在底部加入如下，注意目录名别配错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_201</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure><p>运行<code>source /etc/profile</code>让配置立即生效</p><p>验证安装：<code>java -version</code>，<code>javac</code></p><h1 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h1><ol><li>去官网<a href="https://jenkins.io/zh/doc/pipeline/tour/getting-started/" target="_blank" rel="noopener">下载</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -jar jenkins.war --httpPort=8080</span></span><br></pre></td></tr></table></figure></li></ol><p>然后访问 ip:8080即可</p><ol start="2"><li>也可以在docker里装，这样就不用什么jdk了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull jenkins/jenkins:lts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建个目录，给他权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/jenkins</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R 1000:1000 jenkins/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -nd jenkins/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给镜像打个标签</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker tag jenkins/jenkins:lts jenkins:lts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器跑起来，映射目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -itd -p 8080:8080 -p 50000:50000 --name jenkins --privileged=<span class="literal">true</span> -v /home/jenkins:/var/jenkins_home jenkins:lts</span></span><br></pre></td></tr></table></figure></li></ol><p>这时候用 ip:8080 就可以访问了，进去以后设置好初始admin账户密码，插件选推荐就行了。</p><h1 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h1><ol><li>左侧’系统管理’-右侧’系统设置’，找github服务器，添加一个，添加凭据，凭据类型选secret text，凭据添刚才github生成的access_token，id不用填，保存，勾上manage hooks，然后点连接测试，通过即可。</li><li>新建个任务（job），把配置都填好，shell脚本写好即可。</li></ol><p>至此，github+jenkins+docker的环境就搭好了，随后可以在jenkins中执行预先编写好的makefile和dockerfile来打包docker镜像和部署应用，本文不赘述makefile和dockerfile等的具体使用方法。</p>]]></content>
      
      
      <categories>
          
          <category> 云容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云容器 </tag>
            
            <tag> docker </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用rxjs实现小程序状态管理</title>
      <link href="/2018/10/01/2018/%E7%94%A8rxjs%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2018/10/01/2018/%E7%94%A8rxjs%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用vue和react做开发，我们经常选择vuex，redux一类的状态管理工具来辅助管理状态，状态逻辑复杂的微信小程序，如果有状态管理工具的话，可以极大地提高开发效率和可维护性。</p><p>想象这样一个场景，一个用户修改了用户名，小程序中有十多个组件都用到了这个“用户名”这个状态，如果需要把这些显示都更新，用原生的方式来实现是很麻烦的，本文介绍一种方法，基于<a href="https://rxjs.dev/" target="_blank" rel="noopener">rxjs</a>来管理小程序中的各种状态。</p><p>rxjs学习资料：</p><ul><li>官网文档<a href="https://rxjs.dev/" target="_blank" rel="noopener">https://rxjs.dev/</a></li><li><a href="https://rxjs-cn.github.io/learn-rxjs-operators/about/" target="_blank" rel="noopener">学习rxjs操作符</a> 这篇文章介绍了低版本rxjs的操作符，很实用</li></ul><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><h1 id="引入rxjs"><a href="#引入rxjs" class="headerlink" title="引入rxjs"></a>引入rxjs</h1><p>我们尽量避免多余的构建工具，直接使用umd版本的rxjs，下载地址：<a href="https://unpkg.com/rxjs/bundles/rxjs.umd.min.js" target="_blank" rel="noopener">https://unpkg.com/rxjs/bundles/rxjs.umd.min.js</a>，下载好后，把它放在<code>lib</code>目录中。</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>新建一个<code>stores</code>目录，把状态相关的文件都放在里面，在<code>stores</code>下新建一个<code>user.js</code>，用来管理用户的状态。</p><p>新建<code>services</code>目录，存放api相关的服务，在<code>services</code>中新建<code>user.js</code>，用来存放请求用户数据的函数。</p><p>demo：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userSvc = &#123;</span><br><span class="line">  getUserInfo: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行获取用户信息'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xiaoming'</span>; <span class="comment">// 第一次请求返回的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stores/user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">'../lib/rxjs.umd.min'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; userSvc &#125; <span class="keyword">from</span> <span class="string">'../services/user'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = &#123;</span><br><span class="line">  UPDATE_USER_INFO: <span class="string">'UPDATE_USER_INFO'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> states = &#123;</span><br><span class="line">  <span class="comment">// BehaviorSubject把数据流中的最新值推送给订阅者</span></span><br><span class="line">  user$$: <span class="keyword">new</span> Rx.BehaviorSubject(userSvc.getUserInfo())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  [types.UPDATE_USER_INFO] () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'laoming'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> types.UPDATE_USER_INFO:</span><br><span class="line">      <span class="keyword">var</span> newStates = actions[types.UPDATE_USER_INFO]();</span><br><span class="line">      states.user$$.next(newStates);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; types, states, actions, dispatch &#125;;</span><br></pre></td></tr></table></figure><p>实现的思路是这样的：</p><p>首先创建一个<code>status</code>，用来保存用户的状态，用户状态是一个<code>subject</code>，这样就可以向各个组件中的<code>订阅</code>发送<code>组播</code>。</p><p>然后写一系列的<code>action</code>，action的名称表示要执行的动作，在action函数中完成一些异步操作，比如重新获取用户信息，我们之后会把它的返回值广播给所有的订阅。</p><p>最后是<code>dispatch</code>函数，它描述了如何修改状态值，dispatch根据传入的action名称，执行不同的action和逻辑，最终用<code>subject.next()</code>方法把数据广播给每个订阅。</p><p>有了这组代码，我们只需要在使用数据的地方订阅就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在某个page中</span></span><br><span class="line"><span class="keyword">import</span> &#123; states <span class="keyword">as</span> userStates &#125; <span class="keyword">from</span> <span class="string">'../../stores/user'</span>;</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 订阅测试，此时，name的值应该为'xiaoming'</span></span><br><span class="line">    userStates.user$$.subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        name: data</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在page的某个组件中</span></span><br><span class="line"><span class="keyword">import</span> &#123; states <span class="keyword">as</span> userStates, types <span class="keyword">as</span> userTypes, dispatch <span class="keyword">as</span> userDispatch &#125; <span class="keyword">from</span> <span class="string">'../../stores/user'</span>;</span><br><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  attached() &#123;</span><br><span class="line">    userStates.user$$.subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        name: data</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      userDispatch(userTypes.UPDATE_USER_INFO);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3秒后，将会看到page和component中的name都变成了’laoming’，这样就实现了简单的状态管理。</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让mocha支持ES6模块</title>
      <link href="/2018/09/26/2018/%E8%AE%A9mocha%E6%94%AF%E6%8C%81ES6%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/09/26/2018/%E8%AE%A9mocha%E6%94%AF%E6%8C%81ES6%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><code>mocha</code>是比较常用的node测试框架，但是只支持<code>commonjs</code>模块，要让<code>mocha</code>支持ES6模块，需要<code>babel</code>的帮助。</p><p>书写本文时用到的工具版本为：</p><ul><li>babel <code>v7</code></li><li>mocha <code>v6.2</code></li></ul><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @babel/cli @babel/core @babel/preset-env @babel/register</span><br></pre></td></tr></table></figure><h1 id="babel配置"><a href="#babel配置" class="headerlink" title="babel配置"></a>babel配置</h1><p>在<code>package.json</code>或<code>.babelrc</code>中添加配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "babel": &#123;</span></span><br><span class="line"><span class="comment">//   "presets": [</span></span><br><span class="line"><span class="comment">//     "@babel/preset-env"</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h1><p>最后配置运行命令，<code>babel/register</code>会绑定到node的<code>require</code>模块，代码运行时会实施转译，这样就可以支持ES6的模块语法了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "mocha --require @babel/register test/*.js",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让你的小程序支持多环境打包</title>
      <link href="/2018/09/15/2018/%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E6%8C%81%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/"/>
      <url>/2018/09/15/2018/%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E6%8C%81%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>开发小程序时，最麻烦的事情莫过于在上线前需要反复切换测试和正式环境接口地址。</p><p>本文介绍一种小程序工程化改造的思路，基于这个我们能够实现小程序自动根据多环境打包。</p><h1 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h1><p><a href="https://github.com/mecoepcoo/miniprogram-boilerplate" target="_blank" rel="noopener">https://github.com/mecoepcoo/miniprogram-boilerplate</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>阅读本文，你需要有对以下内容的基本认知：</p><ul><li>gulp</li><li>环境变量</li></ul><a id="more"></a><h1 id="工程化改造"><a href="#工程化改造" class="headerlink" title="工程化改造"></a>工程化改造</h1><p>原生的小程序只有一个简单的启动脚手架，不支持less、sass等样式预处理器，对npm的支持也不是太好，我们自己做一个简单的构建工具，来增强小程序的功能。本节起一个抛砖引玉的作用，基于这个思路，可以改造出更多更强大的功能。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>dist 输出/发布目录，在微信开发者工具中打开这个目录<ul><li>project.config.json 配置文件，这个文件与src中的配置无关</li></ul></li><li>src<ul><li>miniprogram<ul><li>assets 静态资源目录，放图片之类的东西</li><li>components 组件目录</li><li>pages 小程序页面目录</li><li>app.js 小程序入口</li><li>app.json 小程序全局配置</li><li>app.less</li><li>sitemap.json</li><li>project.config.json 配置文件样板，这个文件不会被编译到dist中</li></ul></li></ul></li></ul><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>本文写作时，gulp的版本是<code>v4</code>，api与之前的版本有一些变化。</p><p>创建一个空目录后，先安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">$ npm i -D gulp gulp-plumber gulp-rename del</span><br></pre></td></tr></table></figure><p>在根目录新建<code>gulpfile.js</code>文件，引入依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> plumber = <span class="built_in">require</span>(<span class="string">'gulp-plumber'</span>); <span class="comment">// 发生错误时阻止gulp退出并输出日志</span></span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>); <span class="comment">// 输出时重命名文件</span></span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br></pre></td></tr></table></figure><h2 id="支持less"><a href="#支持less" class="headerlink" title="支持less"></a>支持less</h2><p>用less等预处理器书写样式，可能会更方便，安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D gulp-less gulp-cssnano</span><br></pre></td></tr></table></figure><p>假设我们的源码放在<code>/src/miniprogram</code>目录下，输出到<code>/dist</code>目录下。</p><p>现在让gulp支持less编译：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>); <span class="comment">// 处理less</span></span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">'gulp-cssnano'</span>); <span class="comment">// 压缩代码</span></span><br><span class="line"><span class="comment">// 编译样式</span></span><br><span class="line">gulp.task(<span class="string">'build:style'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([ <span class="comment">// 千万不要漏掉return，否则gulp不知道这个任务何时完成</span></span><br><span class="line">    <span class="string">'src/miniprogram/pages/**/*.less'</span>, </span><br><span class="line">    <span class="string">'src/miniprogram/components/**/*.less'</span>,</span><br><span class="line">    <span class="string">'src/miniprogram/spreadpack/**/*.less'</span>,</span><br><span class="line">    <span class="string">'src/miniprogram/app.less'</span></span><br><span class="line">  ], &#123;<span class="attr">base</span>: <span class="string">'src/miniprogram'</span>&#125;)</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(</span><br><span class="line">      cssnano(&#123;</span><br><span class="line">        zindex: <span class="literal">false</span>,</span><br><span class="line">        autoprefixer: <span class="literal">false</span>,</span><br><span class="line">        discardComments: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(</span><br><span class="line">      rename(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">        path.extname = <span class="string">'.wxss'</span>; <span class="comment">// 我们用less做后缀名，但小程序只支持wxss，所以需要修改输出的后缀</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">// 写入到dist文件夹中</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理脚本、模板和配置文件"><a href="#处理脚本、模板和配置文件" class="headerlink" title="处理脚本、模板和配置文件"></a>处理脚本、模板和配置文件</h2><p>本文只做简单的思路介绍，所以我们还是按照原来的方法编写小程序的js和模板。</p><p>这里只是把js，wxml和json复制到输出目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译示例</span></span><br><span class="line">gulp.task(<span class="string">'build:main'</span>, gulp.series(<span class="string">'build:style'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([</span><br><span class="line">    <span class="string">'src/miniprogram/**/*'</span>,</span><br><span class="line">    <span class="string">'!src/miniprogram/**/*.less'</span>, <span class="comment">// 排除less后缀文件</span></span><br><span class="line">    <span class="string">'!src/project.config.json'</span>, <span class="comment">// 配置文件不写入到dist文件夹，开发时需手动拷贝到dist文件夹中 !!!</span></span><br><span class="line">  ], &#123;<span class="attr">base</span>: <span class="string">'src/miniprogram'</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="清理输出目录"><a href="#清理输出目录" class="headerlink" title="清理输出目录"></a>清理输出目录</h2><p>在发布前，我们需要删除掉多余的文件，这里新增一个工作流用来清理输出目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean'</span>, cb =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> del([</span><br><span class="line">    <span class="string">'dist/**/*'</span>,</span><br><span class="line">    <span class="string">'!dist/project.config.json'</span></span><br><span class="line">  ], cb);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="配置开发环境启动命令和构建命令"><a href="#配置开发环境启动命令和构建命令" class="headerlink" title="配置开发环境启动命令和构建命令"></a>配置开发环境启动命令和构建命令</h2><p>最后我们补全功能，首先增加一个开发环境启动配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'build'</span>, gulp.series(<span class="string">'build:main'</span>));</span><br><span class="line"><span class="comment">// 监听文件(若文件修改则执行相关的任务)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> watcher = gulp.watch(<span class="string">'src/**'</span>, cb =&gt; cb());</span><br><span class="line">  watcher.on(<span class="string">'all'</span>, (event, path, stats) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File '</span> + path + <span class="string">' was '</span> + event + <span class="string">', running tasks...'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> watcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(watch));</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中增加脚本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "npm run clean &amp;&amp; npm run build",</span><br><span class="line">  "dev": "gulp",</span><br><span class="line">  "build": "gulp build",</span><br><span class="line">  "watch": "gulp watch",</span><br><span class="line">  "clean": "gulp clean",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在执行<code>npm start</code>或者<code>npm run dev</code>，用小程序开发工具打开dist目录，就能看到效果了。</p><h1 id="注入环境变量"><a href="#注入环境变量" class="headerlink" title="注入环境变量"></a>注入环境变量</h1><p>有了gulp，一切关于构建的问题都简单了。使用<code>gulp-preprocess</code>来支持环境变量。</p><p>gulp-preprocess的用法见<a href="https://github.com/pioug/gulp-preprocess" target="_blank" rel="noopener">官方文档</a>。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cross-env gulp-preprocess</span><br></pre></td></tr></table></figure><h2 id="修改构建配置"><a href="#修改构建配置" class="headerlink" title="修改构建配置"></a>修改构建配置</h2><p>由于操作系统之间设置环境变量命令的差异，引入<code>cross-env</code>来解决，先修改<code>package.json</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "cross-env NODE_ENV=prod npm run clean &amp;&amp; npm run build",</span><br><span class="line">  "dev": "cross-env NODE_ENV=dev gulp",</span><br><span class="line">  "build": "cross-env NODE_ENV=prod gulp build",</span><br><span class="line">  "watch": "cross-env NODE_ENV=dev gulp watch",</span><br><span class="line">  "clean": "gulp clean",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了一个名为<code>NODE_ENV</code>的环境变量，并设置了<code>dev</code>和<code>prod</code>两个值，这样开发时会取dev变量，打包发布时会取prod变量。</p><p>然后增加gulp配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preprocess = <span class="built_in">require</span>(<span class="string">'gulp-preprocess'</span>); <span class="comment">// 注入环境变量</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build:main'</span>, gulp.series(<span class="string">'build:style'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([</span><br><span class="line">    <span class="string">'src/miniprogram/**/*'</span>,</span><br><span class="line">    <span class="string">'!src/miniprogram/assets/**/*'</span>, <span class="comment">// 新增配置在这里</span></span><br><span class="line">    <span class="string">'!src/miniprogram/**/*.less'</span>,</span><br><span class="line">    <span class="string">'!src/project.config.json'</span>,</span><br><span class="line">  ], &#123;<span class="attr">base</span>: <span class="string">'src/miniprogram'</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(preprocess()) <span class="comment">// 新增配置在这里</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于preprocess这个插件会影响静态资源，所以需要把静态资源的打包拿出去</span></span><br><span class="line"><span class="comment">/* 处理静态资源 */</span></span><br><span class="line">gulp.task(<span class="string">'build:assets'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([</span><br><span class="line">    <span class="string">"src/miniprogram/assets/**/*"</span></span><br><span class="line">  ], &#123; <span class="attr">base</span>: <span class="string">'src/miniprogram'</span>, <span class="attr">allowEmpty</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改构建配置</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, gulp.parallel(<span class="string">'build:main'</span>, <span class="string">'build:assets'</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> watcher = gulp.watch(<span class="string">'src/**'</span>, gulp.parallel(<span class="string">'build:main'</span>, <span class="string">'build:assets'</span>), cb =&gt; cb());</span><br><span class="line">  watcher.on(<span class="string">'all'</span>, (event, path, stats) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File '</span> + path + <span class="string">' was '</span> + event + <span class="string">', running tasks...'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> watcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>用这种方法注入环境变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> env = <span class="string">'/* @echo NODE_ENV */'</span>;</span><br><span class="line"><span class="keyword">let</span> apiRoot = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">switch</span> (env) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'dev'</span>:</span><br><span class="line">    apiRoot = <span class="string">'http://dev-api.tianzhen.tech'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'prod'</span>:</span><br><span class="line">    apiRoot = <span class="string">'http://api.tianzhen.tech'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个demo，运行<code>npm start</code>试试吧！</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
